import{_ as o,v as e}from"./chunks/framework.BIOGcQYR.js";import"./chunks/theme.DDFtv3LO.js";const u=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"en/usage/index.md","filePath":"en/usage/index.md"}'),t={name:"en/usage/index.md"};function n(r,i,a,s,c,d){return e.openBlock(),e.createElementBlock("div",null,i[0]||(i[0]=[e.createStaticVNode('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><p>As <code>Semo</code> provides almost no direct benefits, it is necessary to elaborate on how to leverage <code>Semo</code> effectively, from its original design perspective. <code>Semo</code> is designed to improve the efficiency of enterprise-level project development, so anywhere that can be solved through code is a suitable application for <code>Semo</code>.</p><h2 id="division-by-project-stage" tabindex="-1">Division by Project Stage <a class="header-anchor" href="#division-by-project-stage" aria-label="Permalink to &quot;Division by Project Stage&quot;">​</a></h2><p>Depending on the stage of the project, <code>Semo</code> can play a role in various phases:</p><ul><li>Project initiation phase: Quick initialization of projects</li><li>Development phase: Validate input and output of methods, encapsulate infrastructure, and reduce wheel reinvention by accessing core methods quickly</li><li>Maintenance phase: Write a large number of management commands or operation and maintenance scripts</li><li>Online troubleshooting: When bugs occur online and can only be reproduced online, use <code>REPL</code> to step closer to the truth</li><li>Online operations and maintenance: Use well-written scripts and commands to easily solve various requirements proposed by stakeholders, thereby improving trust between departments</li></ul><h2 id="division-by-form" tabindex="-1">Division by Form <a class="header-anchor" href="#division-by-form" aria-label="Permalink to &quot;Division by Form&quot;">​</a></h2><p><code>Semo</code> fully considers various usage scenarios, and its role varies in different scenarios:</p><ul><li>Developing plugins: Different plugins have different functionalities but consistent code styles</li><li>Project integration: Provide command-line infrastructure for projects; if combined with other plugins, even the entire project can be built on <code>Semo</code></li><li>Solutions: Provide scaffolding for various business scenarios, precipitate best practices, and improve the startup speed of new projects</li><li>Distribution: Based on solutions, further integrate to build complete and usable products, thus generating commercial value</li></ul><p>The division here is not absolute, and there is no scenario that must be addressed by <code>Semo</code>. Moreover, there are countless solutions to any problem encountered. The purpose of <code>Semo</code> is to provide consistency, reduce redundant development, improve communication efficiency, and continuously solidify enterprise technical capabilities.</p>',9)]))}const m=o(t,[["render",n]]);export{u as __pageData,m as default};
