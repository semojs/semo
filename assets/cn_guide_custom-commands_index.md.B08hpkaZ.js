import{_ as i,v as s}from"./chunks/framework.CAE459Ah.js";import"./chunks/theme.BJ09EcjL.js";const c=JSON.parse('{"title":"自定义命令","description":"","frontmatter":{},"headers":[],"relativePath":"cn/guide/custom-commands/index.md","filePath":"cn/guide/custom-commands/index.md"}'),e={name:"cn/guide/custom-commands/index.md"};function n(t,a,l,p,h,d){return s.openBlock(),s.createElementBlock("div",null,a[0]||(a[0]=[s.createStaticVNode(`<h1 id="自定义命令" tabindex="-1">自定义命令 <a class="header-anchor" href="#自定义命令" aria-label="Permalink to &quot;自定义命令&quot;">​</a></h1><p>不管是做 <code>Semo</code> 的插件开发，还是基于 <code>Semo</code> 来开发应用和工具脚本。其中基本无法避免的就是要添加 <code>Semo</code> 命令行，然后才是封装插件。为了实现流畅的开发体验，<code>Semo</code> 一直在不断的优化整个流程，现在也仍然在进行当中，本文就说一说如何在 <code>Semo</code> 下定义命令。</p><h2 id="准备阶段" tabindex="-1">准备阶段 <a class="header-anchor" href="#准备阶段" aria-label="Permalink to &quot;准备阶段&quot;">​</a></h2><p>后面会说到，我们不需要自己去创建命令代码模板，完全是重复劳动，所以提供了命令行代码生成器。但是要往哪里放这些代码呢，首先需要声明。这里 <code>Semo</code> 识别的配置文件是 <code>.semorc.yml</code>，起作用的配置是 <code>commandDir</code>，有时项目是基于 ts 的，还需要配置一个 ts 的命令行目录 <code>commandMakeDir</code>，有时你是为其他插件定义的命令写子命令，这时，需要定义相应的 <code>extandDir</code> 和 <code>extandMakeDir</code>。</p><p>以插件开发为例，配置文件大致如下：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">typescript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">commandDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lib/commands</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">commandMakeDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">src/commands</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extendDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lib/extends</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extendMakeDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">src/extends</span></span></code></pre></div><h2 id="创建命令的命令" tabindex="-1">创建命令的命令 <a class="header-anchor" href="#创建命令的命令" aria-label="Permalink to &quot;创建命令的命令&quot;">​</a></h2><p><code>Semo</code> 内置了代码生成的机制，并包含了新增命令的代码生成命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo generate command COMMAND_NAME COMMAND_DESCRIPTION</span></span></code></pre></div><h2 id="命令行代码模板示例" tabindex="-1">命令行代码模板示例 <a class="header-anchor" href="#命令行代码模板示例" aria-label="Permalink to &quot;命令行代码模板示例&quot;">​</a></h2><p>这里以 ts 版命令为例</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test description&#39;</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Set to true to disable this command temporarily</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// export const plugin = &#39;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Set this for importing plugin config</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> desc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test description&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// export const aliases = &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// export const middlewares = (argv) =&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // yargs.option(&#39;option&#39;, { default, describe, alias })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // yargs.commandDir(&#39;test&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Start to draw your dream code!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以看到和 yargs 框架的命令相比，还是有一些不同，因为 <code>Semo</code> 是基于 <code>yargs</code> 的，所以这里的不同是基于 <code>yargs</code> 的扩展性定制的。</p><h2 id="命令行的属性说明" tabindex="-1">命令行的属性说明 <a class="header-anchor" href="#命令行的属性说明" aria-label="Permalink to &quot;命令行的属性说明&quot;">​</a></h2><h3 id="disabled-或者-disable" tabindex="-1"><code>disabled</code> 或者 <code>disable</code> <a class="header-anchor" href="#disabled-或者-disable" aria-label="Permalink to &quot;\`disabled\` 或者 \`disable\`&quot;">​</a></h3><p>这个是标识是否有禁用这个命令，当禁用时不光看不见，也不起作用。主要是用于想禁用命令又不想说删除代码的场景。</p><h3 id="command-desc-aliases-builder-handler" tabindex="-1"><code>command</code>, <code>desc</code>, <code>aliases</code>, <code>builder</code>, <code>handler</code> <a class="header-anchor" href="#command-desc-aliases-builder-handler" aria-label="Permalink to &quot;\`command\`, \`desc\`, \`aliases\`, \`builder\`, \`handler\`&quot;">​</a></h3><p>这几个属性都是 <code>yargs</code> 命令规范里的，很好理解，无需赘述。可以参考 <a href="https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module" target="_blank" rel="noreferrer">yargs 相关文档</a></p><p><code>desc</code> 也可以写成 <code>description</code> 或者 <code>describe</code></p><h3 id="middlewares" tabindex="-1"><code>middlewares</code> <a class="header-anchor" href="#middlewares" aria-label="Permalink to &quot;\`middlewares\`&quot;">​</a></h3><p>没错，这里是支持中间件的，好处是什么呢，就是你可以把相似的处理逻辑，提取成中间件，然后在多个命令中复用代码，一般只在复杂的业务场景下需要。</p><h3 id="plugin" tabindex="-1"><code>plugin</code> <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;\`plugin\`&quot;">​</a></h3><p>这个是专属于 <code>Semo</code> 插件的属性，如果你在一个插件里定义命令，那么声明这个的好处是，你可以通过 <code>Utils.pluginConfig</code> 获取到全局配置文件里的专属配置。</p><p>~/.semo/.semorc.yml</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">$plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><p>在代码中可以</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const a = Utils.pluginConfig(&#39;a&#39;, 1)</span></span></code></pre></div><p>这里内部会计算从哪个插件配置里取值。</p><h2 id="关于子命令" tabindex="-1">关于子命令 <a class="header-anchor" href="#关于子命令" aria-label="Permalink to &quot;关于子命令&quot;">​</a></h2><p>注意到，代码模板里有一行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yargs.commandDir(&#39;test&#39;)</span></span></code></pre></div><p>这一行的效果是去 test 目录去找子命令。这里有一个缺陷，当插件想让其他插件扩展这个子命令时，其他插件没办法做到，那怎么做呢，<code>Semo</code> 基于这个方法封装了一下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const argv = await yargs.argv</span></span>
<span class="line"><span>argv.$core?.extendSubCommand(&#39;test&#39;, &#39;semo-plugin-test&#39;, yargs, __dirname)</span></span></code></pre></div><p>这里重点是前两个参数要填写正确，然后其他插件怎么扩展子命令呢，在创建命令的时候这么写：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo generate command test/subcommand --extend=semo-plugin-test</span></span></code></pre></div>`,36)]))}const r=i(e,[["render",n]]);export{c as __pageData,r as default};
