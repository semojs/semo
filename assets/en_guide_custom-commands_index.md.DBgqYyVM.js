import{_ as a,v as s}from"./chunks/framework.BckUIXX1.js";import"./chunks/theme.CINKKgSj.js";const c=JSON.parse('{"title":"Custom Commands","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/custom-commands/index.md","filePath":"en/guide/custom-commands/index.md"}'),i={name:"en/guide/custom-commands/index.md"};function n(t,e,o,l,d,h){return s.openBlock(),s.createElementBlock("div",null,e[0]||(e[0]=[s.createStaticVNode(`<h1 id="custom-commands" tabindex="-1">Custom Commands <a class="header-anchor" href="#custom-commands" aria-label="Permalink to &quot;Custom Commands&quot;">​</a></h1><p>Whether it&#39;s developing plugins for <code>Semo</code> or building applications and utility scripts based on <code>Semo</code>, one thing that cannot be avoided is adding <code>Semo</code> command lines before encapsulating plugins. In order to achieve a smooth development experience, <code>Semo</code> has been continuously optimizing the entire process, which is still ongoing. This article will discuss how to define commands in <code>Semo</code>.</p><h2 id="preparation-stage" tabindex="-1">Preparation Stage <a class="header-anchor" href="#preparation-stage" aria-label="Permalink to &quot;Preparation Stage&quot;">​</a></h2><p>As mentioned later, we don&#39;t need to create command code templates ourselves, as it would be repetitive work. Therefore, a command line code generator is provided. But where should this code be placed? First, it needs to be declared. The configuration file recognized by <code>Semo</code> here is <code>.semorc.yml</code>, and the effective configuration is <code>commandDir</code>. Sometimes, if the project is based on TypeScript, you also need to configure a TypeScript command line directory <code>commandMakeDir</code>. If you are defining commands for other plugins, you need to define the corresponding <code>extandDir</code> and <code>extandMakeDir</code>.</p><p>Taking plugin development as an example, the configuration file is roughly as follows:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">typescript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">commandDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lib/commands</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">commandMakeDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">src/commands</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extendDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lib/extends</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extendMakeDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">src/extends</span></span></code></pre></div><h2 id="creating-a-command" tabindex="-1">Creating a Command <a class="header-anchor" href="#creating-a-command" aria-label="Permalink to &quot;Creating a Command&quot;">​</a></h2><p><code>Semo</code> has a built-in code generation mechanism, including a command to generate code for adding new commands:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo generate command COMMAND_NAME COMMAND_DESCRIPTION</span></span></code></pre></div><h2 id="example-command-code-template" tabindex="-1">Example Command Code Template <a class="header-anchor" href="#example-command-code-template" aria-label="Permalink to &quot;Example Command Code Template&quot;">​</a></h2><p>Here&#39;s an example of a TypeScript-based command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test description&#39;</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Set to true to disable this command temporarily</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// export const plugin = &#39;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Set this for importing plugin config</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> desc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test description&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// export const aliases = &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// export const middleware = (argv) =&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // yargs.option(&#39;option&#39;, { default, describe, alias })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // yargs.commandDir(&#39;test&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Start to draw your dream code!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You can see that there are some differences compared to commands in the yargs framework because <code>Semo</code> is based on <code>yargs</code>, so these differences are customized based on the extensibility of <code>yargs</code>.</p><h2 id="explanation-of-command-properties" tabindex="-1">Explanation of Command Properties <a class="header-anchor" href="#explanation-of-command-properties" aria-label="Permalink to &quot;Explanation of Command Properties&quot;">​</a></h2><h3 id="disabled" tabindex="-1"><code>disabled</code> <a class="header-anchor" href="#disabled" aria-label="Permalink to &quot;\`disabled\`&quot;">​</a></h3><p>This indicates whether the command is disabled. When disabled, it is not visible or functional. It&#39;s mainly used in scenarios where you want to disable a command without deleting the code.</p><h3 id="command-desc-aliases-builder-handler" tabindex="-1"><code>command</code>, <code>desc</code>, <code>aliases</code>, <code>builder</code>, <code>handler</code> <a class="header-anchor" href="#command-desc-aliases-builder-handler" aria-label="Permalink to &quot;\`command\`, \`desc\`, \`aliases\`, \`builder\`, \`handler\`&quot;">​</a></h3><p>These properties are all part of the <code>yargs</code> command specification and are straightforward. They can be referred to in the <a href="https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module" target="_blank" rel="noreferrer">yargs documentation</a>.</p><h3 id="middleware" tabindex="-1"><code>middleware</code> <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;\`middleware\`&quot;">​</a></h3><p>Yes, middleware is supported here. The advantage is that you can extract similar processing logic into middleware and reuse the code in multiple commands. It&#39;s generally needed in complex business scenarios.</p><h3 id="plugin" tabindex="-1"><code>plugin</code> <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;\`plugin\`&quot;">​</a></h3><p>This is an attribute exclusive to <code>Semo</code> plugins. If you define commands within a plugin, the benefit of declaring this attribute is that you can retrieve global configuration from the configuration file using <code>Utils.pluginConfig</code>.</p><p>~/.semo/.semorc.yml</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">$plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><p>In the code, you can use:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const a = Utils.pluginConfig(&#39;a&#39;, 1)</span></span></code></pre></div><p>Internally, it calculates from which plugin configuration to retrieve the value.</p><h2 id="about-the-return-value-of-handler" tabindex="-1">About the Return Value of <code>handler</code> <a class="header-anchor" href="#about-the-return-value-of-handler" aria-label="Permalink to &quot;About the Return Value of \`handler\`&quot;">​</a></h2><p>Since <code>Semo</code> has unified entry points, if you really need to recycle resources through <code>onFinishCommand</code>, it cannot be directly called by the command line. However, you can achieve this by enabling the <code>after_command</code> hook. Additionally, the return value of the command also participates in the logic.</p><ul><li>Returning <code>true</code> or nothing executes <code>onFinishCommand</code>.</li><li>Returning <code>false</code> doesn&#39;t execute <code>onFinishCommand</code>. Even if the <code>after_command</code> hook is enabled, it won&#39;t execute.</li></ul><p>Resource recycling for command lines should be implemented using the <code>after_command</code> hook.</p><h2 id="about-subcommands" tabindex="-1">About Subcommands <a class="header-anchor" href="#about-subcommands" aria-label="Permalink to &quot;About Subcommands&quot;">​</a></h2><p>Note the line in the code template:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yargs.commandDir(&#39;test&#39;)</span></span></code></pre></div><p>The effect of this line is to look for subcommands in the <code>test</code> directory. There is a flaw here: when a plugin wants other plugins to extend this subcommand, other plugins cannot do so. How to do it then? <code>Semo</code> encapsulates this method based on this method.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Utils.extendSubCommand(&#39;test&#39;, &#39;test-plugin&#39;, yargs, __dirname)</span></span></code></pre></div><p>The key here is to fill in the first two parameters correctly. Then, how do other plugins extend subcommands? When creating a command, write it like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo generate command test/subcommand --extend=test-plugin</span></span></code></pre></div>`,39)]))}const k=a(i,[["render",n]]);export{c as __pageData,k as default};
