import{_ as i,v as e}from"./chunks/framework.DVX6DBR0.js";import"./chunks/theme.Ch0B1-0F.js";const h=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/index.md","filePath":"en/guide/index.md"}'),o={name:"en/guide/index.md"};function t(a,n,s,r,c,d){return e.openBlock(),e.createElementBlock("div",null,n[0]||(n[0]=[e.createStaticVNode('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>Semo is a command-line development framework, built on top of the excellent <code>yargs</code> package with encapsulation and extension. Semo aims not to solve problems such as parsing command-line options and parameters, defining commands, and triggering commands, but to standardize and specify how to implement them in business scenarios. This ensures a consistent command-line architecture for numerous Node microservice projects within a company, while also providing various extension features.</p><h2 id="principles" tabindex="-1">Principles <a class="header-anchor" href="#principles" aria-label="Permalink to &quot;Principles&quot;">​</a></h2><ul><li><strong>Consistency</strong>: Regardless of the framework used in Node projects or how abstraction is layered, this framework can be used to implement command-line scripts with a unified style.</li><li><strong>Extensibility</strong>: Plugins can be extended, commands can be overridden, configurations can be overwritten, and the hook mechanism can interact with hooks defined by built-in or third-party plugins.</li><li><strong>Efficiency</strong>: Simple to get started with, high development efficiency, consistent style, high maintenance efficiency, frequent use, and high work efficiency.</li></ul><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>Few but powerful core concepts, including plugins, commands, scripts, configurations, hooks, etc.</li><li>Plugins, commands, and configurations can be extended or overridden according to conventions.</li><li>Provides an extensible REPL environment and supports <code>await</code>.</li><li>Child commands can be added to commands defined by other plugins.</li><li>Provides a simple code generation mechanism; basic plugin, command, and script boilerplate code can be automatically generated, with support for extensions.</li><li>Supports plugins with npm organization package name format.</li></ul><h2 id="origin-of-the-name" tabindex="-1">Origin of the Name <a class="header-anchor" href="#origin-of-the-name" aria-label="Permalink to &quot;Origin of the Name&quot;">​</a></h2><p>As is well known, naming is hard. Semo is a concept born out of the spark in my mind, translated from various languages, meaning &quot;seed&quot; in Esperanto, symbolizing a starting point and hope.</p><h2 id="conventions" tabindex="-1">Conventions <a class="header-anchor" href="#conventions" aria-label="Permalink to &quot;Conventions&quot;">​</a></h2><ul><li>All example code is based on <code>Typescript</code>. Although the core of <code>Semo</code> is also written in <code>Typescript</code>, <code>Semo</code> supports projects written purely in <code>js</code>, as explained in the configuration management section.</li><li>The documentation assumes that <code>semo</code> and <code>yarn</code> are globally installed in the environment and does not explicitly mention them in specific chapters.</li><li>The development environment of this project is <code>Mac</code>, and the runtime environment is either the local machine or the container environment online. It has not been tested on <code>Windows</code> and may have compatibility issues.</li></ul>',10)]))}const p=i(o,[["render",t]]);export{h as __pageData,p as default};
