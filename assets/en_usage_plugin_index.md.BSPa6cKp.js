import{_ as i,v as e}from"./chunks/framework.BHrFfmSo.js";import"./chunks/theme.eptbpJBm.js";const u=JSON.parse('{"title":"Plugins","description":"","frontmatter":{},"headers":[],"relativePath":"en/usage/plugin/index.md","filePath":"en/usage/plugin/index.md"}'),o={name:"en/usage/plugin/index.md"};function s(a,n,t,l,r,d){return e.openBlock(),e.createElementBlock("div",null,n[0]||(n[0]=[e.createStaticVNode(`<h1 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h1><p>In the section &quot;Basics-&gt;Plugin Development,&quot; the method and considerations for plugin development have been introduced. Here, we mainly discuss why and when to develop plugins.</p><h2 id="business-plugins" tabindex="-1">Business Plugins <a class="header-anchor" href="#business-plugins" aria-label="Permalink to &quot;Business Plugins&quot;">​</a></h2><p>Firstly, without plugins, several built-in commands in <code>Semo</code> are not very useful. All the value needs to be unleashed through extending <code>Semo</code>, and plugins are the most important form of extension. The most common feature of plugins is defining commands, which is not surprising because <code>Semo</code> itself is a command and is designed as a command-line development framework. The key point here is that commands can be defined within plugins, and plugins, as independent Node modules, can be published to <code>npm</code> or a company&#39;s custom <code>registry</code>, allowing a command to be installed in multiple projects.</p><p>It&#39;s challenging to ensure that a project is useful in all of the company&#39;s projects, but there may be intersections among different projects within the same business line. We can further standardize plugin names to delineate the scope of plugin applicability, for example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo-plugin-[company_identifier]-[business_line_identifier]-[purpose_identifier]</span></span></code></pre></div><h2 id="innovative-plugins" tabindex="-1">Innovative Plugins <a class="header-anchor" href="#innovative-plugins" aria-label="Permalink to &quot;Innovative Plugins&quot;">​</a></h2><p>Additionally, as mentioned in previous documentation, we can develop plugins that are not related to business attributes. As long as they are interesting and have ideas, they can be tried, such as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo-plugin-music-download</span></span>
<span class="line"><span>semo-plugin-video-download</span></span>
<span class="line"><span>semo-plugin-todolist</span></span>
<span class="line"><span>semo-plugin-puzzle-me</span></span>
<span class="line"><span>semo-plugin-convert-a-to-b</span></span></code></pre></div><p>The above are just random names; in fact, these plugins do not exist yet.</p><h2 id="local-plugins" tabindex="-1">Local Plugins <a class="header-anchor" href="#local-plugins" aria-label="Permalink to &quot;Local Plugins&quot;">​</a></h2><p>Not all plugins need to be published to <code>npm</code>. We can develop many plugins known only to ourselves to meet our own needs. These plugins are generally placed in <code>~/.semo/node_modules</code>, allowing them to be called from anywhere in the current account.</p><h2 id="community-plugins" tabindex="-1">Community Plugins <a class="header-anchor" href="#community-plugins" aria-label="Permalink to &quot;Community Plugins&quot;">​</a></h2><p>If you are satisfied with your plugin work and want to share it with others, you can publish the plugin to <code>npm</code> and then tell others to use it. Of course, since <code>Semo</code> only acts as a command dispatcher, in most cases, you don&#39;t necessarily have to write such <code>npm</code> packages based on <code>Semo</code>, unless you are a fan of <code>Semo</code> ^_^.</p><p>So, what community plugins are available now? The community is still in its infancy, and plugins are relatively scarce, including but not limited to the following:</p><ul><li><strong>semo-plugin-application</strong> - [Core] Defines a specification for adding subcommands to a Node project.</li><li><strong>semo-plugin-script</strong> - [Core] Defines a specification for scripts in a Node project.</li><li><strong>semo-plugin-plugin</strong> - [Core] Provides a global plugin management command-line tool for Semo.</li><li><strong>semo-plugin-shell</strong> - [Core] Provides a simple command-line environment to save keystrokes.</li><li><strong>semo-plugin-hook</strong> - [Core] Provides information related to hooks.</li><li><strong>semo-plugin-ssh</strong> - [Extension] Provides simple <code>SSH</code> account management functionality.</li><li><strong>semo-plugin-read</strong> - [Extension] Provides tools for converting URLs to <code>Markdown</code> and various other formats. <ul><li><strong>semo-plugin-read-extend-format-wechat</strong> - This is an extension of the read plugin, providing functionality for editing WeChat Official Account articles online, to be used with read.</li><li>... There may be many related sub-plugins, which are not listed one by one.</li></ul></li><li><strong>semo-plugin-serve</strong> - [Extension] Provides functionality for a simple <code>HTTP</code> server, similar to <code>serve</code>.</li><li><strong>semo-plugin-sequelize</strong> - [Extension] Integrates with <code>Sequelize</code> to provide database access capabilities.</li><li><strong>semo-plugin-redis</strong> - [Extension] Integrates with <code>Redis</code> to provide cache access capabilities.</li></ul>`,16)]))}const m=i(o,[["render",s]]);export{u as __pageData,m as default};
