import{_ as n,v as e}from"./chunks/framework.BckUIXX1.js";import"./chunks/theme.CINKKgSj.js";const h=JSON.parse('{"title":"How to Contribute","description":"","frontmatter":{},"headers":[],"relativePath":"en/community/contrib/index.md","filePath":"en/community/contrib/index.md"}'),o={name:"en/community/contrib/index.md"};function i(a,t,r,s,d,c){return e.openBlock(),e.createElementBlock("div",null,t[0]||(t[0]=[e.createStaticVNode('<h1 id="how-to-contribute" tabindex="-1">How to Contribute <a class="header-anchor" href="#how-to-contribute" aria-label="Permalink to &quot;How to Contribute&quot;">​</a></h1><h2 id="adoption-and-use" tabindex="-1">Adoption and Use <a class="header-anchor" href="#adoption-and-use" aria-label="Permalink to &quot;Adoption and Use&quot;">​</a></h2><p>There are many choices for standardizing command-line implementation methods. In general, having a standard is better than not having one. If your team already has its own standards, then there&#39;s no need to adopt <code>Semo</code>&#39;s standard. However, if your team hasn&#39;t standardized command-line operations before, you might want to give <code>Semo</code> a try. If you happen to favor <code>yargs</code>, some of <code>Semo</code>&#39;s ideas might be insightful to you as well.</p><p><code>Semo</code> can be used in many areas, including development, testing, deployment, operations, and even non-business scenarios like web scraping.</p><h2 id="writing-documentation" tabindex="-1">Writing Documentation <a class="header-anchor" href="#writing-documentation" aria-label="Permalink to &quot;Writing Documentation&quot;">​</a></h2><p>The documentation for <code>Semo</code> needs to be gradually improved with everyone&#39;s help. Some usage tips may not be mentioned in the documentation yet, so feel free to explore and share your findings.</p><h2 id="writing-plugins" tabindex="-1">Writing Plugins <a class="header-anchor" href="#writing-plugins" aria-label="Permalink to &quot;Writing Plugins&quot;">​</a></h2><p>There are two types of plugins here. One type can play a role in technology accumulation in enterprise-level projects by encapsulating common operations and logic into plugins. The other type is personal creative plugins, unrelated to business, which can implement and share creative works.</p><h2 id="contributing-code" tabindex="-1">Contributing Code <a class="header-anchor" href="#contributing-code" aria-label="Permalink to &quot;Contributing Code&quot;">​</a></h2><p>Contributing code, whether it&#39;s for using in business projects, creating creative plugins, or participating in the development of core features, is a great way to give back to the community.</p><h2 id="helping-identify-issues" tabindex="-1">Helping Identify Issues <a class="header-anchor" href="#helping-identify-issues" aria-label="Permalink to &quot;Helping Identify Issues&quot;">​</a></h2><p>Whether it&#39;s code or documentation, many issues may remain undiscovered, such as outdated code, typos in documentation, or inaccuracies due to continuous improvement and upgrades. It requires everyone&#39;s collaborative efforts to maintain and improve them.</p>',12)]))}const m=n(o,[["render",i]]);export{h as __pageData,m as default};
