import{_ as i,v as e}from"./chunks/framework.Ds1oseh_.js";import"./chunks/theme.CP53Ib8k.js";const u=JSON.parse('{"title":"Plugins","description":"","frontmatter":{},"headers":[],"relativePath":"usage/plugin/index.md","filePath":"usage/plugin/index.md"}'),o={name:"usage/plugin/index.md"};function s(a,n,t,l,r,d){return e.openBlock(),e.createElementBlock("div",null,n[0]||(n[0]=[e.createStaticVNode(`<h1 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h1><p>In the <code>Basics -&gt; Plugin Development</code> section, the methods and precautions for plugin development have already been introduced. This section primarily introduces why and when to develop plugins.</p><h2 id="business-plugins" tabindex="-1">Business Plugins <a class="header-anchor" href="#business-plugins" aria-label="Permalink to &quot;Business Plugins&quot;">​</a></h2><p>Firstly, without plugins, <code>Semo</code>&#39;s few built-in commands aren&#39;t very useful to everyone. All value needs to be unlocked by extending <code>Semo</code>, with plugins being the most important form. The most common function within plugins is defining commands. This isn&#39;t surprising, as <code>Semo</code> itself is a command and is designed as a command-line development framework. The key point here is that commands can be defined within plugins. As independent Node modules, plugins can be published to <code>npm</code> or a company&#39;s self-built <code>registry</code>, enabling a command to be installed across multiple projects.</p><p>It&#39;s hard to guarantee that a plugin will be useful across all of a company&#39;s projects, but different projects within the same business line might have overlaps. We can further standardize plugin names to delineate their scope of applicability, for example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo-plugin-[CompanyIdentifier]-[BusinessLineIdentifier]-[PurposeIdentifier]</span></span></code></pre></div><h2 id="innovative-plugins" tabindex="-1">Innovative Plugins <a class="header-anchor" href="#innovative-plugins" aria-label="Permalink to &quot;Innovative Plugins&quot;">​</a></h2><p>Additionally, as mentioned in previous documentation, we can also develop non-business-related plugins. As long as you find it interesting and have an idea, feel free to try it out, for example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo-plugin-music-download</span></span>
<span class="line"><span>semo-plugin-video-download</span></span>
<span class="line"><span>semo-plugin-todolist</span></span>
<span class="line"><span>semo-plugin-puzzle-me</span></span>
<span class="line"><span>semo-plugin-convert-a-to-b</span></span></code></pre></div><p>The names above are just examples; these plugins don&#39;t actually exist yet.</p><h2 id="local-plugins" tabindex="-1">Local Plugins <a class="header-anchor" href="#local-plugins" aria-label="Permalink to &quot;Local Plugins&quot;">​</a></h2><p>Not all plugins need to be published to <code>npm</code>. We can develop many plugins known only to ourselves to meet personal needs. These plugins are typically placed in <code>~/.semo/node_modules</code>, making them callable from anywhere within the current user account.</p><h2 id="community-plugins" tabindex="-1">Community Plugins <a class="header-anchor" href="#community-plugins" aria-label="Permalink to &quot;Community Plugins&quot;">​</a></h2><p>If you are satisfied with your plugin creation and want to share it with others, you can publish it to <code>npm</code> and let others know about it. Of course, since <code>Semo</code> primarily acts as a command dispatcher, there&#39;s a high probability you don&#39;t necessarily need to base such <code>npm</code> packages on <code>Semo</code>, unless you&#39;re a <code>Semo</code> fan ^_^.</p><p>So, what community plugins are currently available? The community isn&#39;t fully established yet, and plugins are still relatively few, including but not limited to the following: (Here, &#39;core&#39; refers to plugins maintained in the core repository alongside <code>@semo/core</code>)</p><ul><li><strong>semo-plugin-application</strong>, [Core] Defines a specification for adding subcommands to a Node project.</li><li><strong>semo-plugin-script</strong>, [Core] Defines a script specification usable within a Node project.</li><li><strong>semo-plugin-plugin</strong>, [Core] Provides command-line tools for managing Semo global plugins.</li><li><strong>semo-plugin-shell</strong>, [Core] Provides a simple command-line environment to reduce typing.</li><li><strong>semo-plugin-hook</strong>, [Core] Allows viewing hook-related information.</li><li><strong>semo-plugin-ssh</strong>, [Extension] Provides simple <code>SSH</code> account management functionality.</li><li><strong>semo-plugin-read</strong>, [Extension] Provides tools to convert URLs into <code>Markdown</code>, and subsequently into various other formats. <ul><li><strong>semo-plugin-read-extend-format-wechat</strong> This is an extension for the read plugin, providing functionality for an online editor for WeChat official account articles. Needs to be used with read.</li><li>... There might be many related sub-plugins here, not listed individually.</li></ul></li><li><strong>semo-plugin-serve</strong>, [Extension] Provides a simple <code>HTTP</code> server functionality, similar to <code>serve</code>.</li><li><strong>semo-plugin-sequelize</strong>, [Extension] Provides integration with <code>Sequelize</code> to offer database access capabilities.</li><li><strong>semo-plugin-redis</strong>, [Extension] Provides integration with <code>Redis</code> to offer cache access capabilities.</li></ul>`,16)]))}const g=i(o,[["render",s]]);export{u as __pageData,g as default};
