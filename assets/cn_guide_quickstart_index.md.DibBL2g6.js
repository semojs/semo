import{_ as n,v as s}from"./chunks/framework.DkZpVeXH.js";import"./chunks/theme.DWUzMWnV.js";const h=JSON.parse('{"title":"快速上手","description":"","frontmatter":{},"headers":[],"relativePath":"cn/guide/quickstart/index.md","filePath":"cn/guide/quickstart/index.md"}'),e={name:"cn/guide/quickstart/index.md"};function p(i,a,o,l,t,c){return s.openBlock(),s.createElementBlock("div",null,a[0]||(a[0]=[s.createStaticVNode(`<h1 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h1><h2 id="全局安装" tabindex="-1">全局安装 <a class="header-anchor" href="#全局安装" aria-label="Permalink to &quot;全局安装&quot;">​</a></h2><p><code>Semo</code> 命令行工具同时也是一个辅助工程师日常开发，运维和调试的命令行工具，建议你在本地环境全局安装，具体的使用说明可以参考<a href="https://semo.js.org" target="_blank" rel="noreferrer">这里</a>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ npm i -g @semo/cli</span></span>
<span class="line"><span>$ semo help</span></span>
<span class="line"><span>semo</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Execute a Semo style command file</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Commands:</span></span>
<span class="line"><span>  semo                                Execute a Semo style command file                                        [default]</span></span>
<span class="line"><span>  semo cleanup [type]                 Cleanup internal caches.                                          [aliases: clean]</span></span>
<span class="line"><span>  semo completion                     Generate completion script</span></span>
<span class="line"><span>  semo config &lt;op&gt;                    Manage rc config                                                    [aliases: cfg]</span></span>
<span class="line"><span>  semo create &lt;name&gt; [repo] [branch]  Create a new project from specific repo                               [aliases: c]</span></span>
<span class="line"><span>  semo generate &lt;component&gt;           Generate component sample code                                        [aliases: g]</span></span>
<span class="line"><span>  semo init                           Init basic config file and directories                                [aliases: i]</span></span>
<span class="line"><span>  semo repl                           Play with REPL                                                        [aliases: r]</span></span>
<span class="line"><span>  semo run [plugin]                   Run any plugin command directly</span></span>
<span class="line"><span>  semo status                         Show environment status info                                         [aliases: st]</span></span>
<span class="line"><span>  semo version                        Show version number</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>  -h, --help     Show help                                                                                     [boolean]</span></span>
<span class="line"><span>  -v, --version  Show version number                                                                           [boolean]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Examples:</span></span>
<span class="line"><span>  semo run hello-world                                        Run a remote plugin command.</span></span>
<span class="line"><span>  semo run --with project-templates — create PROJECT_NAME -T  Clone project template as a starter.</span></span>
<span class="line"><span>  semo repl --require lodash:_                                Start Semo repl and inject lodash object to _.</span></span>
<span class="line"><span>  semo generate command test                                  Generate command template.</span></span>
<span class="line"><span>  semo clean all                                              Clean all cache files and installed npm packages.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Find more information at https://semo.js.org</span></span></code></pre></div><p>可以看到里面有很多的内置命令，但是，需要注意的是，这些命令都是有使用场景的，在不配合任何插件和具体的业务项目时对大家的帮助不会很大，因为 <code>Semo</code> 核心在开发过程中，主要放在定义扩展规范，具体的业务逻辑需要自己去实现，而只有配合具体的业务逻辑进去才能进一步体现 <code>Semo</code> 的作用和价值。</p><h2 id="项目集成" tabindex="-1">项目集成 <a class="header-anchor" href="#项目集成" aria-label="Permalink to &quot;项目集成&quot;">​</a></h2><p><code>Semo</code> 的主要使用场景就是为一个已经存在的业务项目添加命令行机制，如果没有 <code>Semo</code>，各个业务项目当然也是可以开发出自己的命令行的，但是这部分基本都属于重复投入，而且不同的团队实现的方案肯定是有差异的，这种差异带来的是维护成本的增加，而企业级开发，降低成本就是提高利润。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd YOUR_PROJECT</span></span>
<span class="line"><span>semo init</span></span></code></pre></div><p>如果仅仅使用 Semo 的插件调度方式，那么不需要安装 <code>@semo/core</code>， 如果想要使用 <code>@semo/core</code> 里的方法，则业务项目要将 <code>@semo/core</code> 添加为项目依赖，但是具体放到 <code>devDependencies</code> 还是 <code>dependencies</code>，需要根据实际情况而定，在业务项目使用 <code>@semo/core</code> 的时候有几种使用模式：</p><ul><li>业务项目服务核心逻辑依赖 <code>@semo/core</code>，这种侵入式的，必须添加到 <code>dependencies</code>。</li><li>业务项目服务核心逻辑不依赖 <code>@semo/core</code>，但是有使用 @semo/core 来定义命令行或者脚本，而脚本需要在线上执行：这种是非侵入式的，但是由于要在线上执行，也需要添加到 <code>dependencies</code>。</li><li>业务项目服务核心逻辑不依赖 <code>@semo/core</code>，也没有使用 <code>@semo/core</code> 来定义命令行或脚本，仅仅是用了 REPL 的扩展机制，将项目的公共类和函数放到 <code>REPL</code> 环境来协助开发调试，这种也是非侵入的，而且不需要在线上执行，所以可以放到 <code>devDependencies</code>。</li><li>如果容器环境本身没有安装 <code>Semo</code>， 也可以在项目依赖中添加 <code>@semo/cli</code>， 然后通过 <code>npx semo</code> 来调度。</li></ul><h3 id="添加一个项目命令" tabindex="-1">添加一个项目命令 <a class="header-anchor" href="#添加一个项目命令" aria-label="Permalink to &quot;添加一个项目命令&quot;">​</a></h3><p>这里要考虑的是未来项目命令行工具的规划，如果很多，最好划分一下层次，另外，第一层子命令是一些核心命令，如果我们的命令都放到第一层，会容易混淆和误用。</p><p><strong>定义一个一级子命令</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo generate command test</span></span>
<span class="line"><span>semo test # 执行刚刚添加的命令</span></span></code></pre></div><p><strong>定义一个二级子命令</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install semo-plugin-application</span></span>
<span class="line"><span>semo generate command application/test --extend=application</span></span>
<span class="line"><span>semo application test</span></span></code></pre></div><p>为了让项目命令和核心以及插件定义的命令隔离，这里推荐的是将项目命令用上面第二种方式添加，同时如果是复杂的项目，还可以继续分层次。当然这样造成了一个问题就是命令的层次增加导致的记忆负担，以及要多输入很多前面的命令才能找到要执行的命令。所以一般，我们在项目里还需要为运行环境的 <code>bashrc</code> 增加几个 <code>alias</code>:</p><p><strong>假设线上环境是用 Docker 容器部署的</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Dockerfile</span></span>
<span class="line"><span>RUN echo &#39;alias semo=&quot;npx semo&quot;&#39; &gt;&gt; /home/node/.bashrc</span></span>
<span class="line"><span>RUN echo &#39;alias app=&quot;npx semo app&quot;&#39; &gt;&gt; /home/node/.bashrc</span></span></code></pre></div><p>这面的命令演示了缩减命令长度的方法，在实际使用过程中，如果命令分层特别深，这里可以多定义一些 <code>alias</code>。</p><h2 id="开发插件" tabindex="-1">开发插件 <a class="header-anchor" href="#开发插件" aria-label="Permalink to &quot;开发插件&quot;">​</a></h2><p>如果不是在项目中使用 <code>Semo</code>，仅仅是要快速实现一些脚本命令，帮助自己提高工作效率，这时你可以使用 <code>Semo</code> 快速开始。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd ~/.semo/node_modules # 这个目录下定义的插件会全局加载</span></span>
<span class="line"><span>semo create semo-plugin-xxx --template=plugin # 选择插件模板</span></span>
<span class="line"><span>cd semo-plugin-xxx</span></span>
<span class="line"><span>semo hi # # 默认里面有一个示例命令</span></span>
<span class="line"><span>code . # 用 Vscode 开始开发</span></span>
<span class="line"><span>pnpm watch # 基于 \`Typescript\` 开发，需要实时编译</span></span></code></pre></div><p>如果你对插件很满意，想和其他人分享，你直接将你的代码发布到 <code>npm</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote add origin GIT_REPO_URL</span></span>
<span class="line"><span>git add .</span></span>
<span class="line"><span>git commit -m &#39;init&#39;</span></span>
<span class="line"><span>npm login</span></span>
<span class="line"><span>npm version patch &amp;&amp; npm publish</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意，<code>Semo</code> 不保证每个插件定义命令的隔离性，所以如果插件安装的多了，可能会有些命令因重名而相互覆盖，但是日常使用中很少有这种情况发生，为了简单，这里没有做特殊的设计。</p></div><h2 id="安装别人开发的插件" tabindex="-1">安装别人开发的插件 <a class="header-anchor" href="#安装别人开发的插件" aria-label="Permalink to &quot;安装别人开发的插件&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i -g @semo/cli semo-plugin-xxx</span></span></code></pre></div><p>如果别人的插件仅仅是定义了一些你需要的命令，则你可以把命令安装在全局，如果别人的插件在业务项目中要用，则要放到项目依赖当中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd YOUR_PROJECT</span></span>
<span class="line"><span>npm install semo-plugin-xxx</span></span>
<span class="line"><span>pnpm add semo-plugin-xxx // 或</span></span></code></pre></div><p>由于 <code>Semo</code> 的插件同时也是一个 <code>NPM</code> 模块，因此，我们也可以在插件中定义一些库函数，被别人在项目中引入</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;semo-plugin-xxx&#39;</span></span></code></pre></div><p>利用 <code>Semo</code> 提供的钩子机制，也可以使用另一种风格来使用插件提供的业务逻辑支持。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argv.$core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app:component&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>可以看到，在后面这种方式中，不需要显示引入包，只需要安装了即可，这种方式是使用的目录扫描的方式，性能是比较差的，而且没有IDE自动提示的支持，但是对命令行这个场景来说，代码风格简单统一也不错。</p><p>这种方式只支持在能获取到 argv 的场景中使用。</p>`,36)]))}const m=n(e,[["render",p]]);export{h as __pageData,m as default};
