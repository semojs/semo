(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{355:function(a,s,t){"use strict";t.r(s);var e=t(43),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"配置管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置管理"}},[a._v("#")]),a._v(" 配置管理")]),a._v(" "),t("p",[t("code",[a._v("Semo")]),a._v(" 的一个核心概念就是配置，我们可以用多种方法干预 "),t("code",[a._v("Semo")]),a._v(" 的配置，从而影响核心和插件的行为。")]),a._v(" "),t("h2",{attrs:{id:"全局配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局配置"}},[a._v("#")]),a._v(" 全局配置")]),a._v(" "),t("p",[a._v("在家目录有一个全局 "),t("code",[a._v("Semo")]),a._v(" 目录，里面有一个配置文件会在当前账户下全局生效，在 "),t("code",[a._v("~/.semo/.semorc.yml")]),a._v("。")]),a._v(" "),t("p",[a._v("这个全局配置可以对一些命令的默认值进行调整，使得实际在使用命令的时候可以不用每次都写选项，例如：")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("commandDefault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("repo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" REPO_URL\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("branch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" master\n")])])]),t("p",[a._v("这里的意思是，"),t("code",[a._v("semo create")]),a._v(" 命令基于模板项目初始化项目时本来应该是这么写的：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("semo create PROJECT_NAME PROJECT_REPO_URL master -f\n")])])]),t("p",[a._v("但是，因为有了默认配置，我们就可以省略两个参数，而变成：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("semo create PROJECT_NAME -f\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),t("p",[a._v("可以看到，这里的配置是放到 "),t("code",[a._v("commandDefault")]),a._v(" 这个 Key 下的，这是因为，如果配置的第一级，会对所有的命令都生效，如果这个是你希望的，就可以放到第一级。否则，可以在 "),t("code",[a._v("commandDefault")]),a._v(" 下仅对单个命令生效。")])]),a._v(" "),t("p",[a._v("我们经常会用到全局配置，尤其是对一些功能命令，如果我们发现每次都要传一些参数，那么就可以通过全局配置固定下来，再举个例子：")]),a._v(" "),t("p",[a._v("在我们执行 "),t("code",[a._v("semo repl")]),a._v(" 命令时，有个 "),t("code",[a._v("--hook")]),a._v(" 参数，如果传了就会调用 "),t("code",[a._v("hook_repl")]),a._v(" 从而注入一些业务逻辑进来，但是核心默认是 "),t("code",[a._v("--hook=false")]),a._v("，这样启动可以稍微快一点，但是后来发现在业务场景中每次都需要传 "),t("code",[a._v("--hook=true")]),a._v("，那么就可以把这个配置放到全局配置中。")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("commandDefault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("repl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("hook")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n")])])]),t("p",[a._v("这时，执行 "),t("code",[a._v("repl")]),a._v(" 命令就会默认注入业务逻辑了。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("semo repl\n")])])]),t("h2",{attrs:{id:"插件配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件配置"}},[a._v("#")]),a._v(" 插件配置")]),a._v(" "),t("p",[a._v("插件目录下也有一个 "),t("code",[a._v(".semorc.yml")]),a._v(" 文件，配置的文件名和原理都是类似的，但是真正能生效的配置项比较少，默认生成的只有三个")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[a._v("commandDir"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" src/commands\nextendDir"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" src/extends\nhookDir"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" src/hooks\n")])])]),t("p",[a._v("随着项目的更新，这里能够生效的配置项可能更多，目前这3个，分别控制了插件开发时的命令目录，扩展插件命令目录和钩子目录。")]),a._v(" "),t("p",[a._v("除了以上常用的插件配置，插件有时会对外暴露一些配置项，这些配置行一般约定除了从根取以外，还会从插件名命名空间之下取。")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("semo-plugin-xxx")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" bar\n")])])]),t("p",[a._v("这个配置的生效依赖于插件自身实现时的主动尝试获取")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Utils"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("_"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("argv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'semo-plugin-xxx.foo'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" argv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("这样就给了插件内部一个灵活约定专属参数的机会，如果插件内部用了太多顶级配置参数，就很可能会跟其他插件的参数发生冲突。这种风格的配置约定是对 "),t("code",[a._v("commandDefault")]),a._v(" 这种配置的一个补充，插件配置重点是配置，而 commandDefault 是从命令参数的角度的覆盖顺序，前者是主动获取，后者可以做到自动识别。具体插件用的是哪一种需要具体的插件明确给出说明。")]),a._v(" "),t("h2",{attrs:{id:"项目配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目配置"}},[a._v("#")]),a._v(" 项目配置")]),a._v(" "),t("p",[a._v("当我们把 "),t("code",[a._v("Semo")]),a._v(" 整合到项目中的时候，项目里同样也有命令目录，扩展插件命令目录和钩子目录，但是还有更多，比如插件目录和脚本目录:")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("commandDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" bin/semo/commands\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("pluginDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" bin/semo/plugins\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("extendDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" bin/semo/extends\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("scriptDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" bin/semo/scripts\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("hookDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" bin/semo/hooks\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),t("p",[a._v("插件里没有插件目录的原因是我们不支持在插件里定义插件这种嵌套的声明方式，但是我们支持在项目里定义插件。")])]),a._v(" "),t("p",[a._v("除了配置一些目录之外，我们还可以配置一些覆盖命令的选项，比如上面提到的 "),t("code",[a._v("repl")]),a._v(" 命令选项覆盖：")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("hook")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n")])])]),t("p",[a._v("再比如："),t("code",[a._v("semo init")]),a._v(" 命令有个选项 "),t("code",[a._v("--typescript")]),a._v("，如果加了这个选项初始化目录结构，项目配置里也会有对应的覆盖配置，这样在执行 "),t("code",[a._v("semo generate")]),a._v(" 命令时，我们很多代码生成命令都是同时支持 "),t("code",[a._v("js")]),a._v(" 和 "),t("code",[a._v("ts")]),a._v(" 两个版本的，通过这个选项会让所有的代码自动生成时都是 "),t("code",[a._v("typescript")]),a._v(" 风格。")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[a._v("typescript"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n")])])]),t("p",[a._v("在项目配置里配置的选项覆盖仅在当前项目目录生效。这里只是演示用法，实际上我们后面都可以在插件开发时提供多种选项，在项目使用插件时对行为进行限定，以同时支持实现灵活性和个性化。")]),a._v(" "),t("h2",{attrs:{id:"隐藏配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐藏配置"}},[a._v("#")]),a._v(" 隐藏配置")]),a._v(" "),t("p",[t("code",[a._v("Semo")]),a._v(" 有一些隐藏选项，平时很少使用，可以通过 "),t("code",[a._v("semo help --show-hidden")]),a._v(" 查看：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('选项：\n  --script-name                                       Rename script name.                    [字符串] [默认值: "semo"]\n  --plugin-prefix                                     Set plugin prefix.                              [默认值: "semo"]\n  --disable-core-command, --disable-core              Disable core commands.\n  --disable-completion-command, --disable-completion  Disable completion command.\n  --hide-completion-command, --hide-completion        Hide completion command.\n  --disable-global-plugin, --disable-global-plugins   Disable global plugins.\n  --disable-home-plugin, --disable-home-plugins       Disable home plugins.\n  --hide-epilog                                       Hide epilog.\n  --set-epilog                                        Set epilog.                                        [默认值: false]\n  --set-version                                       Set version.\n  --node-env-key, --node-env                          Set node env key                              [默认值: "NODE_ENV"]\n')])])]),t("p",[a._v("可以看到，通过传这些选项我们可以改变一些核心的行为，甚至连自己的命令名称和版本都可以改掉。这里重点说一下其中的两个：")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("--disable-global-plugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("--disable-home-plugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n")])])]),t("p",[a._v("我们一般在项目配置中加上这两个配置，使得在做插件和钩子扫描时可以只扫描当前项目目录，可以稍微提高一点命令的性能。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),t("p",[a._v("在 Semo 配置环境里以下配置是完全等价的\n--foo-bar\n--foo--bar\n--fooBar\nfoo-bar\nfooBar")])]),a._v(" "),t("h2",{attrs:{id:"通过命令行修改配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过命令行修改配置"}},[a._v("#")]),a._v(" 通过命令行修改配置")]),a._v(" "),t("p",[a._v("我们当然可以通过编辑配置文件的方式修改配置，但是 Semo 也提供了编辑配置的命令行工具，在命令行工具的帮助下，就可以用脚本的方式定制某些配置了。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("semo config set a.b.c d 'some comment' -g\nsemo config get a.b.c\nsemo config del a.b.c\nsemo config list\nsemo config list --watch\n")])])]),t("h2",{attrs:{id:"应用环境配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用环境配置"}},[a._v("#")]),a._v(" 应用环境配置")]),a._v(" "),t("blockquote",[t("p",[a._v("此特性 "),t("code",[a._v("v0.8.0")]),a._v(" 引入")])]),a._v(" "),t("p",[a._v("在应用目录（一般是指运行 semo 命令的当前目录），我们会用 Semo 的机制组织我们的项目代码，比如命令行工具，计划任务，钩子扩展，命令扩展，脚本等等。之前系统只能识别 "),t("code",[a._v(".semorc.yml")]),a._v(" 这个配置文件，最新的版本已经可以继续加载一个环境配置，比如当前 "),t("code",[a._v("NODE_ENV=development")]),a._v("(默认值)，则 "),t("code",[a._v(".semorc.development.yml")]),a._v(" 如果存在也会识别和加载，并会覆盖主配置的同名配置（用的是 Lodash 的 "),t("code",[a._v("_.merge")]),a._v("）")]),a._v(" "),t("h2",{attrs:{id:"特殊配置项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊配置项"}},[a._v("#")]),a._v(" 特殊配置项")]),a._v(" "),t("blockquote",[t("p",[a._v("此特性 "),t("code",[a._v("v0.9.0")]),a._v(" 引入")])]),a._v(" "),t("p",[a._v("Semo 的配置和命令行的 "),t("code",[a._v("argv")]),a._v(" 是紧密耦合在一起的，argv 原本的意图只是存储命令行参数，Semo 进一步扩展，希望其能承担项目配置管理的重任，这里约定了几个 "),t("code",[a._v("$")]),a._v(" 开头的配置，有特殊的含义：")]),a._v(" "),t("h3",{attrs:{id:"core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#core"}},[a._v("#")]),a._v(" "),t("code",[a._v("$core")])]),a._v(" "),t("p",[a._v("这个配置下的所有的配置是会影响到核心的，未来会进一步扩展这个配置的作用范围，目前：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("$core.env")]),a._v(" 下配置的对象里的每一项都将会合并到 "),t("code",[a._v("process.env")]),a._v(" 里，作为另一种设置环境变量的方式。")])]),a._v(" "),t("h3",{attrs:{id:"plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[a._v("#")]),a._v(" "),t("code",[a._v("$plugin")])]),a._v(" "),t("p",[a._v("这个配置约定了插件级别的配置项，以前命令只能通过参数来约定配置，但是有一些复杂的配置，没有必要声明成参数，所以设计了这个配置项：")]),a._v(" "),t("p",[a._v("以 "),t("code",[a._v("$plugin.ssh.key = 1")]),a._v(" 举例，意思是给 "),t("code",[a._v("semo-plugin-ssh")]),a._v(" 这个插件下的每个命令都提供了一个配置 "),t("code",[a._v("key=1")]),a._v("， 那这个配置到那里去取呢，Semo 已经帮助装配到 "),t("code",[a._v("argv.$config")]),a._v(" 了，所以你在 ssh 插件的命令下取到的 "),t("code",[a._v("argv.$config")]),a._v(" 就都是 "),t("code",[a._v("$plugin.ssh")]),a._v(" 下的配置。")]),a._v(" "),t("p",[a._v("为了实现这一点，每个命令在声明的时候，添加了一个 "),t("code",[a._v("export const plugin = 'ssh'")]),a._v(" 这样的声明。")]),a._v(" "),t("h3",{attrs:{id:"config"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[a._v("#")]),a._v(" "),t("code",[a._v("$config")])]),a._v(" "),t("p",[a._v("自动解析出的插件配置，一般只是插件开发的时候才需要，如果是应用，建议使用 "),t("code",[a._v("$app")]),a._v(" 来管理配置")]),a._v(" "),t("h3",{attrs:{id:"app-或者-application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#app-或者-application"}},[a._v("#")]),a._v(" "),t("code",[a._v("$app")]),a._v(" 或者 "),t("code",[a._v("$application")])]),a._v(" "),t("p",[a._v("这里没有特殊功能，只是建议应用自己的配置也收到一起，防止跟命令行的选项混淆。比如：")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("$app")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1234")]),a._v("\n")])])]),t("h3",{attrs:{id:"input"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[a._v("#")]),a._v(" "),t("code",[a._v("$input")])]),a._v(" "),t("p",[a._v("这个的作用是当实现支持管道的命令时，"),t("code",[a._v("$input")]),a._v(" 可以自动接收前面命令的输出，不管是不是 Semo 插件的输出，但是输出的格式是不确定的，需要当前命令自己去校验和约束。")]),a._v(" "),t("h3",{attrs:{id:"_0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0"}},[a._v("#")]),a._v(" "),t("code",[a._v("$0")])]),a._v(" "),t("p",[a._v("这个是 "),t("code",[a._v("yargs")]),a._v(" 自带的，表明当前运行的脚本名称。")]),a._v(" "),t("h3",{attrs:{id:"command"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#command"}},[a._v("#")]),a._v(" "),t("code",[a._v("$command")])]),a._v(" "),t("p",[a._v("这个里放的是当前命令的信息，一般来说用处不是很大")])])}),[],!1,null,null,null);s.default=n.exports}}]);