(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{366:function(e,a,s){"use strict";s.r(a);var t=s(42),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"get-started"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-started"}},[e._v("#")]),e._v(" Get started")]),e._v(" "),s("h2",{attrs:{id:"global-installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global-installation"}},[e._v("#")]),e._v(" Global Installation")]),e._v(" "),s("p",[s("code",[e._v("Semo")]),e._v(" is also a developer tool to help development, devops and debug. So you can install it globally.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ npm i -g @semo/cli\n$ semo help\nsemo\n\nExecute a Semo style command file\n\nCommands:\n  semo                                Execute a Semo style command file                                        [default]\n  semo cleanup [type]                 Cleanup internal caches.                                          [aliases: clean]\n  semo completion                     Generate completion script\n  semo config <op>                    Manage rc config                                                    [aliases: cfg]\n  semo create <name> [repo] [branch]  Create a new project from specific repo                               [aliases: c]\n  semo generate <component>           Generate component sample code                                        [aliases: g]\n  semo init                           Init basic config file and directories                                [aliases: i]\n  semo repl                           Play with REPL                                                        [aliases: r]\n  semo run [plugin]                   Run any plugin command directly\n  semo status                         Show environment status info                                         [aliases: st]\n  semo version                        Show version number\n\nOptions:\n  -h, --help     Show help                                                                                     [boolean]\n  -v, --version  Show version number                                                                           [boolean]\n\nExamples:\n  semo run hello-world                                        Run a remote plugin command.\n  semo run --with project-templates — create PROJECT_NAME -T  Clone project template as a starter.\n  semo repl --require lodash:_                                Start Semo repl and inject lodash object to _.\n  semo generate command test                                  Generate command template.\n  semo clean all                                              Clean all cache files and installed npm packages.\n\nFind more information at https://semo.js.org\n")])])]),s("p",[e._v("We can see that there are many internal commands, these commands have special usage, Semo provides rules not specific functions, so mostly you need to install plugins.")]),e._v(" "),s("h2",{attrs:{id:"project-integration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#project-integration"}},[e._v("#")]),e._v(" Project integration")]),e._v(" "),s("p",[s("code",[e._v("Semo")]),e._v(" 的主要使用场景就是为一个已经存在的业务项目添加命令行机制，如果没有 "),s("code",[e._v("Semo")]),e._v("，各个业务项目当然也是可以开发出自己的命令行的，但是这部分基本都属于重复投入，而且不同的团队实现的方案肯定是有差异的，这种差异带来的是维护成本的增加，而企业级开发，降低成本就是提高利润。")]),e._v(" "),s("p",[s("code",[e._v("Semo")]),e._v(" 's main usage is interated with an existed project to provide CLI machanism. You can implement your own CLI implementation, but different projects have different ways to add CLI, This difference brings about an increase in maintenance costs. For enterprise-level development, reducing costs means increasing profits")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd YOUR_PROJECT\nsemo init\n")])])]),s("p",[e._v("If you just use basic Semo rules, you do not need "),s("code",[e._v("@semo/core")]),e._v(", if you want to use methods of "),s("code",[e._v("@semo/core")]),e._v(", then you need add "),s("code",[e._v("@semo/core")]),e._v(" as dependency. There are several usage modes:")]),e._v(" "),s("ul",[s("li",[e._v("If you use "),s("code",[e._v("@semo/core")]),e._v(" in business logic, you need add "),s("code",[e._v("@semo/core")]),e._v(" to "),s("code",[e._v("package.json")]),e._v("'s "),s("code",[e._v("dependencies")]),e._v(".")]),e._v(" "),s("li",[e._v("If you do not use "),s("code",[e._v("@semo/core")]),e._v(" in business logic, and only use Semo in commands and scripts and these need to use online, then you also need to add "),s("code",[e._v("@semo/core")]),e._v(" to "),s("code",[e._v("package.json")]),e._v("'s "),s("code",[e._v("dependencies")]),e._v(".")]),e._v(" "),s("li",[e._v("If you do not use "),s("code",[e._v("@semo/core")]),e._v(" in business logic, only use REPL in development stage, then you can add "),s("code",[e._v("@semo/core")]),e._v(" to "),s("code",[e._v("package.json")]),e._v("'s "),s("code",[e._v("devDependencies")]),e._v(".")]),e._v(" "),s("li",[e._v("If Semo CLI not included in docker container, you can add "),s("code",[e._v("@semo/cli")]),e._v(", then use "),s("code",[e._v("npx semo")]),e._v(" to trigger commands.")])]),e._v(" "),s("h3",{attrs:{id:"add-a-project-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-a-project-command"}},[e._v("#")]),e._v(" Add a project command")]),e._v(" "),s("p",[e._v("You need to plan you project commands levels, it's best not add all command in first level.")]),e._v(" "),s("p",[s("strong",[e._v("Define a first level command")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("semo generate command test\nsemo test\n")])])]),s("p",[s("strong",[e._v("Define a second level command")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install semo-plugin-application\nsemo generate command application/test --extend=application\nsemo application test\n")])])]),s("p",[e._v("为了让项目命令和核心以及插件定义的命令隔离，这里推荐的是将项目命令用上面第二种方式添加，同时如果是复杂的项目，还可以继续分层次。当然这样造成了一个问题就是命令的层次增加导致的记忆负担，以及要多输入很多前面的命令才能找到要执行的命令。所以一般，我们在项目里还需要为运行环境的 "),s("code",[e._v("bashrc")]),e._v(" 增加几个 "),s("code",[e._v("alias")]),e._v(":")]),e._v(" "),s("p",[s("strong",[e._v("假设线上环境是用 Docker 容器部署的")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Dockerfile\nRUN echo 'alias semo=\"npx semo\"' >> /home/node/.bashrc\nRUN echo 'alias app=\"npx semo app\"' >> /home/node/.bashrc\n")])])]),s("p",[e._v("这面的命令演示了缩减命令长度的方法，在实际使用过程中，如果命令分层特别深，这里可以多定义一些 "),s("code",[e._v("alias")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"开发插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发插件"}},[e._v("#")]),e._v(" 开发插件")]),e._v(" "),s("p",[e._v("如果不是在项目中使用 "),s("code",[e._v("Semo")]),e._v("，仅仅是要快速实现一些脚本命令，帮助自己提高工作效率，这时你可以使用 "),s("code",[e._v("Semo")]),e._v(" 快速开始。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd ~/.semo/node_modules # 这个目录下定义的插件会全局加载\nsemo create semo-plugin-xxx --template=plugin # 选择插件模板\ncd semo-plugin-xxx\nsemo hi # # 默认里面有一个示例命令\ncode . # 用 Vscode 开始开发\nyarn watch # 基于 `Typescript` 开发，需要实时编译\n")])])]),s("p",[e._v("如果你对插件很满意，想和其他人分享，你直接将你的代码发布到 "),s("code",[e._v("npm")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("git remove add origin GIT_REPO_URL\ngit add .\ngit commit -m 'init'\nnpm login\nnpm version patch && npm publish\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("注意，"),s("code",[e._v("Semo")]),e._v(" 不保证每个插件定义命令的隔离性，所以如果插件安装的多了，可能会有些命令因重名而相互覆盖，但是日常使用中很少有这种情况发生，为了简单，这里没有做特殊的设计。")])]),e._v(" "),s("h2",{attrs:{id:"安装别人开发的插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装别人开发的插件"}},[e._v("#")]),e._v(" 安装别人开发的插件")]),e._v(" "),s("p",[e._v("如果打开 package.json，你会发现在插件模板里，"),s("code",[e._v("semo")]),e._v(" 放在了 "),s("code",[e._v("peerDependencies")]),e._v("，也就是所有的插件如果要生效，需要和 "),s("code",[e._v("semo")]),e._v(" 一起安装。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i -g @semo/cli semo-plugin-xxx\n")])])]),s("p",[e._v("如果别人的插件仅仅是定义了一些你需要的命令，则你可以把命令安装在全局，如果别人的插件在业务项目中要用，则要放到项目依赖当中。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd YOUR_PROJECT\nnpm install semo-plugin-xxx\nyarn add semo-plugin-xxx // 或\n")])])]),s("p",[e._v("由于 "),s("code",[e._v("Semo")]),e._v(" 的插件同时也是一个 "),s("code",[e._v("Node")]),e._v(" 模块，因此，我们也可以在插件中定义一些库函数，被别人在项目中引入")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" lib "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'semo-plugin-xxx'")]),e._v("\n")])])]),s("p",[e._v("利用 "),s("code",[e._v("Semo")]),e._v(" 提供的钩子机制，也可以使用另一种风格来使用插件提供的业务逻辑支持。")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" Utils "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'@semo/core'")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" xxx "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("await")]),e._v(" Utils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("invokeHook")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'semo:component'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[e._v("可以看到，在后面这种方式中，不需要显示引入包，只需要安装了即可，这种方式是使用的目录扫描的方式，性能是比较差的，而且没有IDE自动提示的支持，但是对命令行这个场景来说，代码风格简单统一也不错。")])])}),[],!1,null,null,null);a.default=n.exports}}]);