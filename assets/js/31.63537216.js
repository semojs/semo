(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{313:function(e,t,a){"use strict";a.r(t);var s=a(14),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"custom-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#custom-commands"}},[e._v("#")]),e._v(" Custom Commands")]),e._v(" "),t("p",[e._v("Whether it's developing plugins for "),t("code",[e._v("Semo")]),e._v(" or building applications and utility scripts based on "),t("code",[e._v("Semo")]),e._v(", one thing that cannot be avoided is adding "),t("code",[e._v("Semo")]),e._v(" command lines before encapsulating plugins. In order to achieve a smooth development experience, "),t("code",[e._v("Semo")]),e._v(" has been continuously optimizing the entire process, which is still ongoing. This article will discuss how to define commands in "),t("code",[e._v("Semo")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"preparation-stage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#preparation-stage"}},[e._v("#")]),e._v(" Preparation Stage")]),e._v(" "),t("p",[e._v("As mentioned later, we don't need to create command code templates ourselves, as it would be repetitive work. Therefore, a command line code generator is provided. But where should this code be placed? First, it needs to be declared. The configuration file recognized by "),t("code",[e._v("Semo")]),e._v(" here is "),t("code",[e._v(".semorc.yml")]),e._v(", and the effective configuration is "),t("code",[e._v("commandDir")]),e._v(". Sometimes, if the project is based on TypeScript, you also need to configure a TypeScript command line directory "),t("code",[e._v("commandMakeDir")]),e._v(". If you are defining commands for other plugins, you need to define the corresponding "),t("code",[e._v("extandDir")]),e._v(" and "),t("code",[e._v("extandMakeDir")]),e._v(".")]),e._v(" "),t("p",[e._v("Taking plugin development as an example, the configuration file is roughly as follows:")]),e._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("typescript")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("commandDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" lib/commands\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("commandMakeDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" src/commands\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extendDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" lib/extends\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extendMakeDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" src/extends\n")])])]),t("h2",{attrs:{id:"creating-a-command"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-command"}},[e._v("#")]),e._v(" Creating a Command")]),e._v(" "),t("p",[t("code",[e._v("Semo")]),e._v(" has a built-in code generation mechanism, including a command to generate code for adding new commands:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("semo generate command COMMAND_NAME COMMAND_DESCRIPTION\n")])])]),t("h2",{attrs:{id:"example-command-code-template"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example-command-code-template"}},[e._v("#")]),e._v(" Example Command Code Template")]),e._v(" "),t("p",[e._v("Here's an example of a TypeScript-based command:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("semo generate "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("command")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'test description'")]),e._v("\n")])])]),t("div",{staticClass:"language-typescript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" disabled "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Set to true to disable this command temporarily")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// export const plugin = '' // Set this for importing plugin config")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" command "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'test'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" desc "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'test description'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// export const aliases = ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// export const middleware = (argv) => {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("builder")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("yargs"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("any")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// yargs.option('option', { default, describe, alias })")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// yargs.commandDir('test')")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("handler")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("async")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("argv"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("any")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("console")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Start to draw your dream code!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("You can see that there are some differences compared to commands in the yargs framework because "),t("code",[e._v("Semo")]),e._v(" is based on "),t("code",[e._v("yargs")]),e._v(", so these differences are customized based on the extensibility of "),t("code",[e._v("yargs")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"explanation-of-command-properties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explanation-of-command-properties"}},[e._v("#")]),e._v(" Explanation of Command Properties")]),e._v(" "),t("h3",{attrs:{id:"disabled"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disabled"}},[e._v("#")]),e._v(" "),t("code",[e._v("disabled")])]),e._v(" "),t("p",[e._v("This indicates whether the command is disabled. When disabled, it is not visible or functional. It's mainly used in scenarios where you want to disable a command without deleting the code.")]),e._v(" "),t("h3",{attrs:{id:"command-desc-aliases-builder-handler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#command-desc-aliases-builder-handler"}},[e._v("#")]),e._v(" "),t("code",[e._v("command")]),e._v(", "),t("code",[e._v("desc")]),e._v(", "),t("code",[e._v("aliases")]),e._v(", "),t("code",[e._v("builder")]),e._v(", "),t("code",[e._v("handler")])]),e._v(" "),t("p",[e._v("These properties are all part of the "),t("code",[e._v("yargs")]),e._v(" command specification and are straightforward. They can be referred to in the "),t("a",{attrs:{href:"https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module",target:"_blank",rel:"noopener noreferrer"}},[e._v("yargs documentation"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"middleware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[e._v("#")]),e._v(" "),t("code",[e._v("middleware")])]),e._v(" "),t("p",[e._v("Yes, middleware is supported here. The advantage is that you can extract similar processing logic into middleware and reuse the code in multiple commands. It's generally needed in complex business scenarios.")]),e._v(" "),t("h3",{attrs:{id:"plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[e._v("#")]),e._v(" "),t("code",[e._v("plugin")])]),e._v(" "),t("p",[e._v("This is an attribute exclusive to "),t("code",[e._v("Semo")]),e._v(" plugins. If you define commands within a plugin, the benefit of declaring this attribute is that you can retrieve global configuration from the configuration file using "),t("code",[e._v("Utils.pluginConfig")]),e._v(".")]),e._v(" "),t("p",[e._v("~/.semo/.semorc.yml")]),e._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("$plugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])]),t("p",[e._v("In the code, you can use:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const a = Utils.pluginConfig('a', 1)\n")])])]),t("p",[e._v("Internally, it calculates from which plugin configuration to retrieve the value.")]),e._v(" "),t("h2",{attrs:{id:"about-the-return-value-of-handler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#about-the-return-value-of-handler"}},[e._v("#")]),e._v(" About the Return Value of "),t("code",[e._v("handler")])]),e._v(" "),t("p",[e._v("Since "),t("code",[e._v("Semo")]),e._v(" has unified entry points, if you really need to recycle resources through "),t("code",[e._v("onFinishCommand")]),e._v(", it cannot be directly called by the command line. However, you can achieve this by enabling the "),t("code",[e._v("after_command")]),e._v(" hook. Additionally, the return value of the command also participates in the logic.")]),e._v(" "),t("ul",[t("li",[e._v("Returning "),t("code",[e._v("true")]),e._v(" or nothing executes "),t("code",[e._v("onFinishCommand")]),e._v(".")]),e._v(" "),t("li",[e._v("Returning "),t("code",[e._v("false")]),e._v(" doesn't execute "),t("code",[e._v("onFinishCommand")]),e._v(". Even if the "),t("code",[e._v("after_command")]),e._v(" hook is enabled, it won't execute.")])]),e._v(" "),t("p",[e._v("Resource recycling for command lines should be implemented using the "),t("code",[e._v("after_command")]),e._v(" hook.")]),e._v(" "),t("h2",{attrs:{id:"about-subcommands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#about-subcommands"}},[e._v("#")]),e._v(" About Subcommands")]),e._v(" "),t("p",[e._v("Note the line in the code template:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yargs.commandDir('test')\n")])])]),t("p",[e._v("The effect of this line is to look for subcommands in the "),t("code",[e._v("test")]),e._v(" directory. There is a flaw here: when a plugin wants other plugins to extend this subcommand, other plugins cannot do so. How to do it then? "),t("code",[e._v("Semo")]),e._v(" encapsulates this method based on this method.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Utils.extendSubCommand('test', 'test-plugin', yargs, __dirname)\n")])])]),t("p",[e._v("The key here is to fill in the first two parameters correctly. Then, how do other plugins extend subcommands? When creating a command, write it like this:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("semo generate command test/subcommand --extend=test-plugin\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);