(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{315:function(e,s,t){"use strict";t.r(s);var n=t(14),a=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"quick-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quick-start"}},[e._v("#")]),e._v(" Quick Start")]),e._v(" "),s("h2",{attrs:{id:"global-installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global-installation"}},[e._v("#")]),e._v(" Global Installation")]),e._v(" "),s("p",[s("code",[e._v("Semo")]),e._v(" command-line tool is also a tool for engineers' daily development, operation, and debugging. It is recommended to install it globally in the local environment. For specific usage instructions, you can refer to "),s("a",{attrs:{href:"https://semo.js.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ npm i -g @semo/cli\n$ semo help\nsemo\n\nExecute a Semo style command file\n\nCommands:\n  semo                                Execute a Semo style command file                                        [default]\n  semo cleanup [type]                 Cleanup internal caches.                                          [aliases: clean]\n  semo completion                     Generate completion script\n  semo config <op>                    Manage rc config                                                    [aliases: cfg]\n  semo create <name> [repo] [branch]  Create a new project from specific repo                               [aliases: c]\n  semo generate <component>           Generate component sample code                                        [aliases: g]\n  semo init                           Init basic config file and directories                                [aliases: i]\n  semo repl                           Play with REPL                                                        [aliases: r]\n  semo run [plugin]                   Run any plugin command directly\n  semo status                         Show environment status info                                         [aliases: st]\n  semo version                        Show version number\n\nOptions:\n  -h, --help     Show help                                                                                     [boolean]\n  -v, --version  Show version number                                                                           [boolean]\n\nExamples:\n  semo run hello-world                                        Run a remote plugin command.\n  semo run --with project-templates â€” create PROJECT_NAME -T  Clone project template as a starter.\n  semo repl --require lodash:_                                Start Semo repl and inject lodash object to _.\n  semo generate command test                                  Generate command template.\n  semo clean all                                              Clean all cache files and installed npm packages.\n\nFind more information at https://semo.js.org\n")])])]),s("p",[e._v("You can see that there are many built-in commands inside. However, it is important to note that these commands are scenario-specific. Without any plugins or specific business projects, they may not be very helpful. In the development process, the core of "),s("code",[e._v("Semo")]),e._v(" mainly focuses on defining extension specifications, and specific business logic needs to be implemented by developers. The true value and functionality of "),s("code",[e._v("Semo")]),e._v(" can only be realized when integrated with specific business logic.")]),e._v(" "),s("h2",{attrs:{id:"project-integration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#project-integration"}},[e._v("#")]),e._v(" Project Integration")]),e._v(" "),s("p",[e._v("The main use case of "),s("code",[e._v("Semo")]),e._v(" is to add a command-line mechanism to an existing business project. Without "),s("code",[e._v("Semo")]),e._v(", individual business projects can certainly develop their own command lines. However, this usually leads to redundant efforts, and the solutions implemented by different teams are bound to differ. This difference increases maintenance costs, and in enterprise-level development, reducing costs leads to increased profits.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd YOUR_PROJECT\nsemo init\n")])])]),s("p",[e._v("If only the plugin dispatching method of Semo is used, it is not necessary to install "),s("code",[e._v("@semo/core")]),e._v(". If you want to use the methods in "),s("code",[e._v("@semo/core")]),e._v(", the business project needs to add "),s("code",[e._v("@semo/core")]),e._v(" as a project dependency. Whether it should be added to "),s("code",[e._v("devDependencies")]),e._v(" or "),s("code",[e._v("dependencies")]),e._v(" depends on the actual situation. There are several usage patterns for business projects using "),s("code",[e._v("@semo/core")]),e._v(":")]),e._v(" "),s("ul",[s("li",[e._v("The core logic of the business project relies on "),s("code",[e._v("@semo/core")]),e._v(", which is invasive and must be added to "),s("code",[e._v("dependencies")]),e._v(".")]),e._v(" "),s("li",[e._v("The core logic of the business project does not rely on "),s("code",[e._v("@semo/core")]),e._v(", but "),s("code",[e._v("@semo/core")]),e._v(" is used to define command lines or scripts, and the scripts need to be executed online: this is non-invasive, but since it needs to be executed online, it also needs to be added to "),s("code",[e._v("dependencies")]),e._v(".")]),e._v(" "),s("li",[e._v("The core logic of the business project does not rely on "),s("code",[e._v("@semo/core")]),e._v(", nor is "),s("code",[e._v("@semo/core")]),e._v(" used to define command lines or scripts. It only uses the REPL extension mechanism to put common classes and functions of the project into the "),s("code",[e._v("REPL")]),e._v(" environment to assist in development and debugging. This is also non-invasive and does not need to be executed online, so it can be added to "),s("code",[e._v("devDependencies")]),e._v(".")]),e._v(" "),s("li",[e._v("If "),s("code",[e._v("Semo")]),e._v(" is not installed in the container environment itself, "),s("code",[e._v("@semo/cli")]),e._v(" can also be added to the project dependencies, and then scheduled through "),s("code",[e._v("npx semo")]),e._v(".")])]),e._v(" "),s("h3",{attrs:{id:"adding-a-project-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adding-a-project-command"}},[e._v("#")]),e._v(" Adding a Project Command")]),e._v(" "),s("p",[e._v("When defining project commands, it's important to consider the future planning of project command-line tools. If there are many commands, it's best to divide them into hierarchies. Additionally, the first layer of sub-commands should be core commands. If all commands are placed in the first layer, it may be easy to confuse and misuse them.")]),e._v(" "),s("p",[s("strong",[e._v("Defining a First-level Sub-command")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("semo generate "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("command")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\nsemo "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Execute the newly added command")]),e._v("\n")])])]),s("p",[s("strong",[e._v("Defining a Second-level Sub-command")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" semo-plugin-application\nsemo generate "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("command")]),e._v(" application/test "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--extend")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("application\nsemo application "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n")])])]),s("p",[e._v("To isolate project commands from those defined by core and plugins, it is recommended to add project commands using the second method above. Furthermore, for complex projects, it is recommended to further divide them into hierarchies. However, this approach increases the burden of memorization for command hierarchy and requires entering many preceding commands to find the command to execute. Therefore, it is generally necessary to add several "),s("code",[e._v("alias")]),e._v(" to the "),s("code",[e._v("bashrc")]),e._v(" of the runtime environment:")]),e._v(" "),s("p",[s("strong",[e._v("Assuming the production environment is deployed using Docker containers")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("// Dockerfile\nRUN "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'alias semo=\"npx semo\"'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /home/node/.bashrc\nRUN "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'alias app=\"npx semo app\"'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /home/node/.bashrc\n")])])]),s("p",[e._v("This command demonstrates a method to shorten the length of commands. In actual use, if the command hierarchy is particularly deep, more "),s("code",[e._v("alias")]),e._v(" can be defined here.")]),e._v(" "),s("h2",{attrs:{id:"developing-plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#developing-plugins"}},[e._v("#")]),e._v(" Developing Plugins")]),e._v(" "),s("p",[e._v("If you're not using "),s("code",[e._v("Semo")]),e._v(" in a project but just want to quickly implement some script commands to improve your work efficiency, you can start quickly with "),s("code",[e._v("Semo")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" ~/.semo/node_modules "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Plugins defined under this directory will be globally loaded")]),e._v("\nsemo create semo-plugin-xxx "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("plugin "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Choose the plugin template")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" semo-plugin-xxx\nsemo hi "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# There is a sample command by default")]),e._v("\ncode "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Start development with Vscode")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("watch")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Develop based on `Typescript` and require real-time compilation")]),e._v("\n")])])]),s("p",[e._v("If you are satisfied with your plugin and want to share it with others, you can directly publish your code to "),s("code",[e._v("npm")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" origin GIT_REPO_URL\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'init'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" login\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" version patch "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" publish\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("Note that "),s("code",[e._v("Semo")]),e._v(" does not guarantee the isolation of commands defined by each plugin. Therefore, if too many plugins are installed, there may be some command conflicts due to name duplication. However, this situation rarely occurs in daily use, and for simplicity, no special design has been made here.")])]),e._v(" "),s("h2",{attrs:{id:"installing-plugins-developed-by-others"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installing-plugins-developed-by-others"}},[e._v("#")]),e._v(" Installing Plugins Developed by Others")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-g")]),e._v(" @semo/cli semo-plugin-xxx\n")])])]),s("p",[e._v("If someone else's plugin only defines some commands you need, you can install the commands globally. If someone else's plugin needs to be used in a business project, it needs to be placed in the project dependencies.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" YOUR_PROJECT\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" semo-plugin-xxx\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" semo-plugin-xxx // Or\n")])])]),s("p",[e._v("Since "),s("code",[e._v("Semo")]),e._v("'s plugins are also "),s("code",[e._v("Node")]),e._v(" modules, we can also define some library functions in plugins and import them into projects by others.")]),e._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" lib "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'semo-plugin-xxx'")]),e._v("\n")])])]),s("p",[e._v("By using the hook mechanism provided by "),s("code",[e._v("Semo")]),e._v(", another style of using business logic support provided by plugins can be achieved.")]),e._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" Utils "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'@semo/core'")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" xxx "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("await")]),e._v(" Utils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("invokeHook")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'semo:component'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[e._v("As seen in the latter approach, there is no need to explicitly import packages. This method uses directory scanning, which has poor performance and lacks support for IDE auto-completion. However, for the command line scenario, having a simple and unified code style is also good.")])])}),[],!1,null,null,null);s.default=a.exports}}]);