(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{323:function(a,t,s){"use strict";s.r(t);var e=s(14),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"自定义命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义命令"}},[a._v("#")]),a._v(" 自定义命令")]),a._v(" "),t("p",[a._v("不管是做 "),t("code",[a._v("Semo")]),a._v(" 的插件开发，还是基于 "),t("code",[a._v("Semo")]),a._v(" 来开发应用和工具脚本。其中基本无法避免的就是要添加 "),t("code",[a._v("Semo")]),a._v(" 命令行，然后才是封装插件。为了实现流畅的开发体验，"),t("code",[a._v("Semo")]),a._v(" 一直在不断的优化整个流程，现在也仍然在进行当中，本文就说一说如何在 "),t("code",[a._v("Semo")]),a._v(" 下定义命令。")]),a._v(" "),t("h2",{attrs:{id:"准备阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备阶段"}},[a._v("#")]),a._v(" 准备阶段")]),a._v(" "),t("p",[a._v("后面会说到，我们不需要自己去创建命令代码模板，完全是重复劳动，所以提供了命令行代码生成器。但是要往哪里放这些代码呢，首先需要声明。这里 "),t("code",[a._v("Semo")]),a._v(" 识别的配置文件是 "),t("code",[a._v(".semorc.yml")]),a._v("，起作用的配置是 "),t("code",[a._v("commandDir")]),a._v("，有时项目是基于 ts 的，还需要配置一个 ts 的命令行目录 "),t("code",[a._v("commandMakeDir")]),a._v("，有时你是为其他插件定义的命令写子命令，这时，需要定义相应的 "),t("code",[a._v("extandDir")]),a._v(" 和 "),t("code",[a._v("extandMakeDir")]),a._v("。")]),a._v(" "),t("p",[a._v("以插件开发为例，配置文件大致如下：")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("typescript")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("commandDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" lib/commands\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("commandMakeDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" src/commands\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("extendDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" lib/extends\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("extendMakeDir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" src/extends\n")])])]),t("h2",{attrs:{id:"创建命令的命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建命令的命令"}},[a._v("#")]),a._v(" 创建命令的命令")]),a._v(" "),t("p",[t("code",[a._v("Semo")]),a._v(" 内置了代码生成的机制，并包含了新增命令的代码生成命令：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("semo generate command COMMAND_NAME COMMAND_DESCRIPTION\n")])])]),t("h2",{attrs:{id:"命令行代码模板示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行代码模板示例"}},[a._v("#")]),a._v(" 命令行代码模板示例")]),a._v(" "),t("p",[a._v("这里以 ts 版命令为例")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("semo generate "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'test description'")]),a._v("\n")])])]),t("div",{staticClass:"language-typescript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" disabled "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Set to true to disable this command temporarily")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// export const plugin = '' // Set this for importing plugin config")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" command "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'test'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" desc "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'test description'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// export const aliases = ''")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// export const middleware = (argv) => {}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("builder")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("yargs"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("any")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// yargs.option('option', { default, describe, alias })")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// yargs.commandDir('test')")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("handler")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("async")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("argv"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("any")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("console")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Start to draw your dream code!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("可以看到和 yargs 框架的命令相比，还是有一些不同，因为 "),t("code",[a._v("Semo")]),a._v(" 是基于 "),t("code",[a._v("yargs")]),a._v(" 的，所以这里的不同是基于 "),t("code",[a._v("yargs")]),a._v(" 的扩展性定制的。")]),a._v(" "),t("h2",{attrs:{id:"命令行的属性说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行的属性说明"}},[a._v("#")]),a._v(" 命令行的属性说明")]),a._v(" "),t("h3",{attrs:{id:"disabled"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disabled"}},[a._v("#")]),a._v(" "),t("code",[a._v("disabled")])]),a._v(" "),t("p",[a._v("这个是标识是否有禁用这个命令，当禁用时不光看不见，也不起作用。主要是用于想禁用命令又不想说删除代码的场景。")]),a._v(" "),t("h3",{attrs:{id:"command-desc-aliases-builder-handler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#command-desc-aliases-builder-handler"}},[a._v("#")]),a._v(" "),t("code",[a._v("command")]),a._v(", "),t("code",[a._v("desc")]),a._v(", "),t("code",[a._v("aliases")]),a._v(", "),t("code",[a._v("builder")]),a._v(", "),t("code",[a._v("handler")])]),a._v(" "),t("p",[a._v("这几个属性都是 "),t("code",[a._v("yargs")]),a._v(" 命令规范里的，很好理解，无需赘述。可以参考 "),t("a",{attrs:{href:"https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module",target:"_blank",rel:"noopener noreferrer"}},[a._v("yargs 相关文档"),t("OutboundLink")],1)]),a._v(" "),t("h3",{attrs:{id:"middleware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[a._v("#")]),a._v(" "),t("code",[a._v("middleware")])]),a._v(" "),t("p",[a._v("没错，这里是支持中间件的，好处是什么呢，就是你可以把相似的处理逻辑，提取成中间件，然后在多个命令中复用代码，一般只在复杂的业务场景下需要。")]),a._v(" "),t("h3",{attrs:{id:"plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[a._v("#")]),a._v(" "),t("code",[a._v("plugin")])]),a._v(" "),t("p",[a._v("这个是专属于 "),t("code",[a._v("Semo")]),a._v(" 插件的属性，如果你在一个插件里定义命令，那么声明这个的好处是，你可以通过 "),t("code",[a._v("Utils.pluginConfig")]),a._v(" 获取到全局配置文件里的专属配置。")]),a._v(" "),t("p",[a._v("~/.semo/.semorc.yml")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("$plugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),t("p",[a._v("在代码中可以")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const a = Utils.pluginConfig('a', 1)\n")])])]),t("p",[a._v("这里内部会计算从哪个插件配置里取值。")]),a._v(" "),t("h2",{attrs:{id:"关于-handler-的返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于-handler-的返回值"}},[a._v("#")]),a._v(" 关于 "),t("code",[a._v("handler")]),a._v(" 的返回值")]),a._v(" "),t("p",[a._v("由于 "),t("code",[a._v("Semo")]),a._v(" 统一了入口，如果真的需要通过 "),t("code",[a._v("onFinishCommand")]),a._v(" 回收资源的化，命令行无法直接调用，但是可以通过启用 "),t("code",[a._v("after_command")]),a._v(" 这个钩子来实现。同时命令的返回值也会参与逻辑。")]),a._v(" "),t("ul",[t("li",[a._v("return true 或 什么都不返回，效果都是执行 "),t("code",[a._v("onFinishCommand")])]),a._v(" "),t("li",[a._v("return false，不执行 "),t("code",[a._v("onFinishCommand")]),a._v("，此时即使启用了 "),t("code",[a._v("after_command")]),a._v(" 钩子也不会执行。")])]),a._v(" "),t("p",[a._v("命令行的资源回收要交给 "),t("code",[a._v("after_command")]),a._v(" 这个钩子来实现。")]),a._v(" "),t("h2",{attrs:{id:"关于子命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于子命令"}},[a._v("#")]),a._v(" 关于子命令")]),a._v(" "),t("p",[a._v("注意到，代码模板里有一行：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("yargs.commandDir('test')\n")])])]),t("p",[a._v("这一行的效果是去 test 目录去找子命令。这里有一个缺陷，当插件想让其他插件扩展这个子命令时，其他插件没办法做到，那怎么做呢，"),t("code",[a._v("Semo")]),a._v(" 基于这个方法封装了一下。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Utils.extendSubCommand('test', 'test-plugin', yargs, __dirname)\n")])])]),t("p",[a._v("这里重点是前两个参数要填写正确，然后其他插件怎么扩展子命令呢，在创建命令的时候这么写：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("semo generate command test/subcommand --extend=test-plugin\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);