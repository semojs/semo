import{_ as a,v as i}from"./chunks/framework.CLl-42Ke.js";import"./chunks/theme.BnQQ2TOv.js";const h=JSON.parse('{"title":"Configuration Management","description":"","frontmatter":{},"headers":[],"relativePath":"guide/config/index.md","filePath":"guide/config/index.md"}'),s={name:"guide/config/index.md"};function n(t,e,o,l,p,r){return i.openBlock(),i.createElementBlock("div",null,e[0]||(e[0]=[i.createStaticVNode(`<h1 id="configuration-management" tabindex="-1">Configuration Management <a class="header-anchor" href="#configuration-management" aria-label="Permalink to &quot;Configuration Management&quot;">​</a></h1><p>A core concept of <code>Semo</code> is configuration. We can influence <code>Semo</code>&#39;s configuration through various methods, thereby affecting the behavior of the core and plugins.</p><h2 id="global-configuration" tabindex="-1">Global Configuration <a class="header-anchor" href="#global-configuration" aria-label="Permalink to &quot;Global Configuration&quot;">​</a></h2><p>There is a global <code>Semo</code> directory in the home directory, containing a configuration file that takes effect globally for the current user account, located at <code>~/.semo/.semorc.yml</code>.</p><p>This global configuration can adjust the default values of some commands, so you don&#39;t have to write options every time when using the command. For example:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">$plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  semo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">REPO_URL</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">main</span></span></code></pre></div><p>This means that the <code>semo create</code> command, when initializing a project based on a template project, would originally be written like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo create PROJECT_NAME PROJECT_REPO_URL main -f</span></span></code></pre></div><p>However, with the default configuration, we can omit two parameters and write it as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo create PROJECT_NAME -f</span></span></code></pre></div><p>We often use global configuration, especially for some functional commands. If we find ourselves passing certain parameters every time, we can fix them using global configuration. Another example:</p><p>When executing the <code>semo repl</code> command, there is a <code>--hook</code> parameter. If passed, it calls <code>hook_repl</code> to inject some business logic. However, the core default is <code>--hook=false</code> for slightly faster startup. But later, it was found that in business scenarios, <code>--hook=true</code> is needed every time. So, this configuration can be placed in the global configuration.</p><p>Now, executing the <code>repl</code> command will inject business logic by default.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo repl</span></span></code></pre></div><h2 id="plugin-configuration" tabindex="-1">Plugin Configuration <a class="header-anchor" href="#plugin-configuration" aria-label="Permalink to &quot;Plugin Configuration&quot;">​</a></h2><p>The plugin directory also has a <code>.semorc.yml</code> file. The configuration filename and principles are similar, but fewer configuration items actually take effect. By default, only three are generated:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commandDir: src/commands</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">extendDir: src/extends</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hookDir: src/hooks</span></span></code></pre></div><p>As the project updates, more configuration items might become effective here. Currently, these three control the command directory, extended plugin command directory, and hook directory during plugin development, respectively.</p><h2 id="project-configuration" tabindex="-1">Project Configuration <a class="header-anchor" href="#project-configuration" aria-label="Permalink to &quot;Project Configuration&quot;">​</a></h2><p>When we integrate <code>Semo</code> into a project, the project also has command, extended plugin command, and hook directories, but also more, such as plugin and script directories:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">commandDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin/semo/commands</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pluginDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin/semo/plugins</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extendDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin/semo/extends</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scriptDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin/semo/scripts</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hookDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin/semo/hooks</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The reason there is no plugin directory within a plugin is that we do not support nested declaration methods like defining plugins within plugins. However, we do support defining plugins within a project.</p></div><p>Besides configuring directories, we can also configure options that override commands, such as the <code>repl</code> command option override mentioned earlier:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>Another example: the <code>semo init</code> command has an option <code>--typescript</code>. If this option is added when initializing the directory structure, the project configuration will also have a corresponding override configuration. This way, when executing the <code>semo generate</code> command, many code generation commands support both <code>js</code> and <code>ts</code> versions. Through this option, all automatically generated code will be in <code>typescript</code> style.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typescript: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>Option overrides configured in the project configuration only take effect within the current project directory. This is just a demonstration of usage. In practice, we can provide various options during plugin development and limit behavior when using the plugin in a project, supporting both flexibility and personalization.</p><h2 id="hidden-configuration" tabindex="-1">Hidden Configuration <a class="header-anchor" href="#hidden-configuration" aria-label="Permalink to &quot;Hidden Configuration&quot;">​</a></h2><p><code>Semo</code> has some hidden options that are rarely used. You can view them using <code>semo help --show-hidden</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Options:</span></span>
<span class="line"><span>  --plugin-prefix                                     Set plugin prefix.                              [Default: &quot;semo&quot;]</span></span>
<span class="line"><span>  --disable-core-command, --disable-core              Disable core commands.</span></span>
<span class="line"><span>  --disable-completion-command, --disable-completion  Disable completion command.</span></span>
<span class="line"><span>  --hide-completion-command, --hide-completion        Hide completion command.</span></span>
<span class="line"><span>  --disable-global-plugin, --disable-global-plugins   Disable global plugins.</span></span>
<span class="line"><span>  --disable-home-plugin, --disable-home-plugins       Disable home plugins.</span></span>
<span class="line"><span>  --hide-epilog                                       Hide epilog.</span></span>
<span class="line"><span>  --set-epilog                                        Set epilog.                                        [Default: false]</span></span>
<span class="line"><span>  --set-version                                       Set version.</span></span>
<span class="line"><span>  --node-env-key, --node-env                          Set node env key                              [Default: &quot;NODE_ENV&quot;]</span></span></code></pre></div><p>As you can see, by passing these options, we can change some core behaviors, even modifying our own command names and versions. Let&#39;s focus on two of them:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">--disable-global-plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">--disable-home-plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>We generally add these two configurations in the project configuration so that plugin and hook scanning only scans the current project directory, which can slightly improve command performance.</p><p>If Semo&#39;s built-in commands are no longer needed, they can also be disabled, calling only project-customized commands, as if the Semo built-in commands didn&#39;t exist.</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">--disable-core-command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In the Semo configuration environment, the following configurations are completely equivalent: --foo-bar --foo--bar --fooBar foo-bar fooBar</p></div><h2 id="modifying-configuration-via-command-line" tabindex="-1">Modifying Configuration via Command Line <a class="header-anchor" href="#modifying-configuration-via-command-line" aria-label="Permalink to &quot;Modifying Configuration via Command Line&quot;">​</a></h2><p>We can certainly modify the configuration by editing the configuration file, but Semo also provides command-line tools for editing configurations. With the help of these tools, certain configurations can be customized using scripts.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo config set a.b.c d &#39;some comment&#39; -g</span></span>
<span class="line"><span>semo config get a.b.c</span></span>
<span class="line"><span>semo config del a.b.c</span></span>
<span class="line"><span>semo config list</span></span>
<span class="line"><span>semo config list --watch</span></span></code></pre></div><h2 id="application-environment-configuration" tabindex="-1">Application Environment Configuration <a class="header-anchor" href="#application-environment-configuration" aria-label="Permalink to &quot;Application Environment Configuration&quot;">​</a></h2><blockquote><p>This feature was introduced in <code>v0.8.0</code></p></blockquote><p>In the application directory (usually the current directory where the <code>semo</code> command is run), we use Semo&#39;s mechanisms to organize our project code, such as command-line tools, scheduled tasks, hook extensions, command extensions, scripts, etc. Previously, the system could only recognize the <code>.semorc.yml</code> configuration file. The latest version can now load an additional environment configuration. For example, if the current <code>NODE_ENV=development</code> (default value), then <code>.semorc.development.yml</code>, if it exists, will also be recognized and loaded, overriding same-named configurations in the main configuration (using Lodash&#39;s <code>_.merge</code>).</p><blockquote><p>This feature was introduced in <code>v2.0.2</code></p></blockquote><p>Added support for <code>.semorc.local.yml</code>. This configuration file has the highest priority, mainly used to override sensitive information such as database passwords. This file should not be committed to git.</p><p>So, in summary, the configuration priority order is: Parameters passed directly via command line &gt; <code>.semorc.local.yml</code> &gt; <code>.semorc.development.yml</code> &gt; <code>.semorc.yml</code> &gt; packageJson.semo &gt; <code>~/.semo/.semorc.yml</code></p><h2 id="special-configuration-items" tabindex="-1">Special Configuration Items <a class="header-anchor" href="#special-configuration-items" aria-label="Permalink to &quot;Special Configuration Items&quot;">​</a></h2><blockquote><p>This feature was introduced in <code>v0.9.0</code></p></blockquote><p>Semo&#39;s configuration is tightly coupled with the command line&#39;s <code>argv</code>. <code>argv</code> was originally intended only to store command-line parameters. Semo further extends it, hoping it can take on the important task of project configuration management. Several configurations starting with <code>$</code> are defined here with special meanings:</p><h3 id="plugin" tabindex="-1"><code>$plugin</code> <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;\`$plugin\`&quot;">​</a></h3><p>This configuration defines plugin-level configuration items. Previously, commands could only define configurations through parameters, but some complex configurations don&#39;t need to be declared as parameters, hence this configuration item was designed:</p><p>Taking <code>$plugin.ssh.key = 1</code> as an example, it means providing a configuration <code>key=1</code> to every command under the <code>semo-plugin-ssh</code> plugin. Where is this configuration retrieved? Semo has already assembled it into <code>argv.$config</code>. So, the <code>argv.$config</code> you get under the ssh plugin&#39;s command contains the configurations under <code>$plugin.ssh</code>.</p><p>To achieve this, each command declaration adds a statement like <code>export const plugin = &#39;ssh&#39;</code>.</p><h3 id="plugins" tabindex="-1"><code>$plugins</code> <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;\`$plugins\`&quot;">​</a></h3><p>The <code>$plugin</code> above adds configuration to specific plugins, while this determines the plugins that take effect in the entire environment. It supports three configurations:</p><ul><li><code>$plugins.register</code> Determines whether to enable the active registration mechanism. If enabled, the automatic scanning mechanism is disabled. Refer to <a href="./../plugin/README.html">Plugin Active Registration Mechanism</a></li><li><code>$plugins.include</code> Performs secondary filtering on registered plugins. This is a whitelist, an array, supporting shorthand forms of plugin names.</li><li><code>$plugins.exclude</code> Performs secondary filtering on registered plugins. This is a blacklist, an array, supporting shorthand forms of plugin names.</li></ul><h3 id="config" tabindex="-1"><code>$config</code> <a class="header-anchor" href="#config" aria-label="Permalink to &quot;\`$config\`&quot;">​</a></h3><p>Automatically parsed plugin configuration, generally only needed during plugin development. For applications, it is recommended to use <code>$app</code> to manage configuration.</p><h3 id="app-or-application" tabindex="-1"><code>$app</code> or <code>$application</code> <a class="header-anchor" href="#app-or-application" aria-label="Permalink to &quot;\`$app\` or \`$application\`&quot;">​</a></h3><p>There&#39;s no special function here, it&#39;s just a recommendation to group application-specific configurations together to avoid confusion with command-line options. For example:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">$app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span></span></code></pre></div><h3 id="input" tabindex="-1"><code>$input</code> <a class="header-anchor" href="#input" aria-label="Permalink to &quot;\`$input\`&quot;">​</a></h3><p>When implementing commands that support piping, <code>$input</code> can automatically receive the output of the preceding command, regardless of whether it&#39;s the output of a Semo plugin. However, the output format is uncertain and needs to be validated and constrained by the current command itself.</p><h3 id="_0" tabindex="-1"><code>$0</code> <a class="header-anchor" href="#_0" aria-label="Permalink to &quot;\`$0\`&quot;">​</a></h3><p>This is built-in with <code>yargs</code>, indicating the name of the currently running script.</p><h3 id="command" tabindex="-1"><code>$command</code> <a class="header-anchor" href="#command" aria-label="Permalink to &quot;\`$command\`&quot;">​</a></h3><p>This contains information about the current command, generally not very useful.</p><h3 id="core" tabindex="-1"><code>$core</code> <a class="header-anchor" href="#core" aria-label="Permalink to &quot;\`$core\`&quot;">​</a></h3><p><code>2.x</code> refactored the project structure, placing many strongly related methods into the <code>Core</code> class. This is the instance of Core.</p><h3 id="log-related" tabindex="-1">Log Related <a class="header-anchor" href="#log-related" aria-label="Permalink to &quot;Log Related&quot;">​</a></h3><p>Added in <code>2.x</code>, for convenient log output.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$warn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> warn</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$jsonLog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonLog</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$colorfulLog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorfulLog</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$colorize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorize</span></span></code></pre></div><p>Only <code>argv.$colorize</code> is used for coloring text; the others are for outputting logs.</p><h3 id="debug-related" tabindex="-1">Debug Related <a class="header-anchor" href="#debug-related" aria-label="Permalink to &quot;Debug Related&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$debugCore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.debugCore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$debugCoreChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.debugCoreChannel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$debugChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.debugChannel</span></span></code></pre></div><p>If you use it with <code>DEBUG=*</code>, you will see debugging information printed by the core. If you also want to use this capability, you can use these APIs.</p><h3 id="prompt-related" tabindex="-1">Prompt Related <a class="header-anchor" href="#prompt-related" aria-label="Permalink to &quot;Prompt Related&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  confirm,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  checkbox,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  expand,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  password,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rawlist,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  select,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  search,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  editor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  number,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This is a wrapper around @inquirer/prompts. You can refer to the inquirer documentation.</p><h2 id="built-in-configuration-management-related-methods" tabindex="-1">Built-in Configuration Management Related Methods <a class="header-anchor" href="#built-in-configuration-management-related-methods" aria-label="Permalink to &quot;Built-in Configuration Management Related Methods&quot;">​</a></h2><h3 id="argv-core-extendconfig" tabindex="-1"><code>argv.$core.extendConfig</code> <a class="header-anchor" href="#argv-core-extendconfig" aria-label="Permalink to &quot;\`argv.$core.extendConfig\`&quot;">​</a></h3><p>This method supports extending a new configuration file, allowing for configuration file groups instead of putting all configurations into <code>.semorc.yml</code>. It also supports environment configuration, for example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv.$core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application.yml&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>application.yml</span></span>
<span class="line"><span>application.development.yml</span></span>
<span class="line"><span>application.production.yml</span></span></code></pre></div><h3 id="argv-core-config" tabindex="-1"><code>argv.$core.config</code> <a class="header-anchor" href="#argv-core-config" aria-label="Permalink to &quot;\`argv.$core.config\`&quot;">​</a></h3><p>This method is used to retrieve a segment of the total configuration, defaulting to retrieving everything. Based on Lodash&#39;s <code>_.get</code> method.</p><h3 id="argv-core-getpluginconfig" tabindex="-1"><code>argv.$core.getPluginConfig</code> <a class="header-anchor" href="#argv-core-getpluginconfig" aria-label="Permalink to &quot;\`argv.$core.getPluginConfig\`&quot;">​</a></h3><p>This method is used to retrieve plugin configuration, only working within the command <code>handler</code>. By default, command-line parameters still take priority, but if a command-line parameter is not specified and has no default value, the plugin-level configuration can be retrieved.</p><h2 id="environment-variable-setting-env" tabindex="-1">Environment Variable Setting <code>.env</code> <a class="header-anchor" href="#environment-variable-setting-env" aria-label="Permalink to &quot;Environment Variable Setting \`.env\`&quot;">​</a></h2><p>By integrating <code>dotenv</code>, we introduced support for <code>.env</code> files. It is enabled by default for command-line tools. For programs, it needs to be enabled manually.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Core } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@semo/core&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> core</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Core</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useDotEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div>`,90)]))}const g=a(s,[["render",n]]);export{h as __pageData,g as default};
