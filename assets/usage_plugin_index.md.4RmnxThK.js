import{_ as s,v as e}from"./chunks/framework.BckUIXX1.js";import"./chunks/theme.CINKKgSj.js";const g=JSON.parse('{"title":"插件","description":"","frontmatter":{},"headers":[],"relativePath":"usage/plugin/index.md","filePath":"usage/plugin/index.md"}'),a={name:"usage/plugin/index.md"};function n(i,o,l,t,d,p){return e.openBlock(),e.createElementBlock("div",null,o[0]||(o[0]=[e.createStaticVNode(`<h1 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h1><p>在 <code>基础-&gt;插件开发</code> 小节，已经介绍了插件开发的方法和注意事项，这里主要是介绍一些为什么开发插件，什么时候开发插件。</p><h2 id="业务插件" tabindex="-1">业务插件 <a class="header-anchor" href="#业务插件" aria-label="Permalink to &quot;业务插件&quot;">​</a></h2><p>首先，如果没有插件， <code>Semo</code> 内置的几个命令对大家也没有多大用处，所有的价值都需要通过扩展 <code>Semo</code> 释放，其中插件就是最重要的一种形态。插件里最常见的就是定义命令，这不奇怪，因为 <code>Semo</code> 本身就是个命令，也被设计为命令行开发框架。这里的重点是命令可以定义到插件中，而插件作为独立的 Node 模块可以发布到 <code>npm</code> 或公司自建的 <code>registry</code>，从而使得一个命令可以被安装到多个项目。</p><p>我们很难保证一个项目可以在公司所有的项目中都有用，但是相同业务线的不同项目中是有可能有交集的，我们可以通过对插件名进一步规范来划分插件的适用范围，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo-plugin-[公司标识]-[业务线标识]-[用途标识]</span></span></code></pre></div><h2 id="创新插件" tabindex="-1">创新插件 <a class="header-anchor" href="#创新插件" aria-label="Permalink to &quot;创新插件&quot;">​</a></h2><p>另外，之前的文档中也提到，我们也可以开发非业务属性的插件，只要自己觉得有趣，有想法，都可以试试，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>semo-plugin-music-download</span></span>
<span class="line"><span>semo-plugin-video-download</span></span>
<span class="line"><span>semo-plugin-todolist</span></span>
<span class="line"><span>semo-plugin-puzzle-me</span></span>
<span class="line"><span>semo-plugin-convert-a-to-b</span></span></code></pre></div><p>上面只是随便起一些名字，其实这些插件还都不存在。</p><h2 id="本地插件" tabindex="-1">本地插件 <a class="header-anchor" href="#本地插件" aria-label="Permalink to &quot;本地插件&quot;">​</a></h2><p>不是所有的插件都必须要发布到 <code>npm</code> 的，我们可以开发很多只有自己知道的插件，满足自己的需求，这种插件一般都是放到 <code>~/.semo/node_modules</code> 的，这样可以在当前账户的任意位置调用。</p><h2 id="社区插件" tabindex="-1">社区插件 <a class="header-anchor" href="#社区插件" aria-label="Permalink to &quot;社区插件&quot;">​</a></h2><p>如果对自己的插件作品很满意，想分享给其他人使用，就可以把插件发布到 <code>npm</code> 上，然后告诉别人来用。当然，由于 <code>Semo</code> 只是充当一个命令调度的作用，其实很大概率上你不必非要基于 <code>Semo</code> 来写这种 <code>npm</code> 包，除非你是 <code>Semo</code> 的粉丝 ^_^。</p><p>那么目前都有哪些社区插件了呢，目前的社区还没怎么建起来，插件还比较少，包括但不限于以下插件：（这里的核心指的是放到核心仓库和 <code>@semo/core</code> 一起维护的插件）</p><ul><li><strong>semo-plugin-application</strong>，【核心】定义了一个 Node 项目中可以使用的，给项目添加子命令的规范。</li><li><strong>semo-plugin-script</strong>，【核心】定义了一个 Node 项目中可以使用的脚本规范。</li><li><strong>semo-plugin-plugin</strong>，【核心】提供了 Semo 全局插件管理命令行工具。</li><li><strong>semo-plugin-shell</strong>，【核心】提供了一个简单的命令行环境，可以少敲几个字母。</li><li><strong>semo-plugin-hook</strong>，【核心】可以查看钩子相关的信息。</li><li><strong>semo-plugin-ssh</strong>, 【扩展】提供了简单的 <code>SSH</code> 账户管理功能。</li><li><strong>semo-plugin-read</strong>，【扩展】提供了将 URL 转换成 <code>Markdown</code>，进而转换成各种格式的工具。 <ul><li><strong>semo-plugin-read-extend-format-wechat</strong> 这是 read 插件的一个扩展，提供了微信公众号文章在线编辑器的功能，需要和 read 一起使用。</li><li>... 这里可能有很多相关子插件，就不一一列举了。</li></ul></li><li><strong>semo-plugin-serve</strong>，【扩展】提供了一个简单的 <code>HTTP</code> 服务器的功能，类似于 <code>serve</code>。</li><li><strong>semo-plugin-sequelize</strong>, 【扩展】提供了对 <code>Sequelize</code> 的集成以提供数据库的访问能力</li><li><strong>semo-plugin-redis</strong>，【扩展】提供了对 <code>Redis</code> 的集成已提供缓存的访问能力</li></ul>`,16)]))}const u=s(a,[["render",n]]);export{g as __pageData,u as default};
